INSERT RECORED WITH THE TO MONTH AND FROM MONTH


 <script>
     document.addEventListener("DOMContentLoaded", function () {
         document.getElementById("generateBtn").addEventListener("click", generateTable);

         document.addEventListener("input", function (event) {
             let target = event.target;
             if (!target.classList.contains("totalShow") &&
                 !target.classList.contains("cancelShow") &&
                 !target.classList.contains("rate")) return;

             target.value = Math.max(target.value);
             let row = target.closest("tr");

             if (target.classList.contains("cancelShow")) {
                 validateCancelShows(row);
             }

             calculateActualShow(row);
             calculateAmount(row);
         });

         function validateCancelShows(row) {
             let totalShows = parseInt(row.querySelector(".totalShow")?.value) || 0;
             let cancelInput = row.querySelector(".cancelShow");
             let cancelShows = parseInt(cancelInput.value) || 0;

             let errorSpan = row.querySelector(".cancelError") || createErrorSpan(row);

             if (cancelShows > totalShows) {
                 errorSpan.innerText = "Canceled shows cannot be more than total shows!";
                 cancelInput.value = totalShows;
             } else {
                 errorSpan.innerText = "";
             }
         }

         function createErrorSpan(row) {
             let errorSpan = document.createElement("span");
             errorSpan.className = "cancelError text-danger";
             row.querySelector(".cancelShow").insertAdjacentElement("afterend", errorSpan);
             return errorSpan;
         }

         document.addEventListener("change", function (event) {
             if (event.target.classList.contains("screenType")) {
                 let row = event.target.closest("tr");
                 calculateActualShow(row);
             }
         });
     });
     function generateTable() {
         let fromDate = document.getElementById("fromDate").value;
         let toDate = document.getElementById("toDate").value;

         if (!fromDate || !toDate) {
             alert("Please select both From Date and To Date.");
             return;
         }

         let from = new Date(fromDate + "-01T00:00:00");
         let to = new Date(toDate + "-01T00:00:00");

         if (from > to) {
             alert("From Date cannot be greater than To Date.");
             return;
         }

         let tableBody = document.getElementById("tableBody");
         let existingRows = Array.from(tableBody.querySelectorAll("tr"));
         let current = new Date(from);
         let months = [];

         while (current <= to) {
             let monthYear = current.toLocaleString("default", { month: "short" }) + " " + current.getFullYear();
             months.push(monthYear);
             current.setMonth(current.getMonth() + 1);
         }

         let existingMonths = new Set();
         existingRows.forEach(row => {
             let firstCell = row.querySelector("td");
             if (firstCell && firstCell.colSpan === 8) {
                 existingMonths.add(firstCell.innerText);
             }
         });

         existingRows.forEach(row => {
             let firstCell = row.querySelector("td");
             if (firstCell && firstCell.colSpan === 8 && firstCell.innerText === months[0]) {
                 row.remove();
             }
         });

         let firstMonthRow = document.createElement("tr");
         firstMonthRow.className = "table-secondary";
         let firstMonthCell = document.createElement("td");
         firstMonthCell.colSpan = "8";
         firstMonthCell.className = "fw-bold text-center";
         firstMonthCell.innerText = months[0];
         firstMonthRow.appendChild(firstMonthCell);
         tableBody.prepend(firstMonthRow);

         let firstRowUsed = false;
         let existingScreens = new Map();
         existingRows.forEach(row => {
             if (!row.querySelector("td") || row.querySelector("td").colSpan !== 8) {
                 let screenIdCell = row.querySelector("td:first-child");
                 if (screenIdCell) {
                     let screenId = screenIdCell.innerText.trim();
                     if (screenId) {
                         existingScreens.set(screenId, row.cloneNode(true));
                     }
                 }
             }
         });

         months.forEach((month, monthIndex) => {
             if (!existingMonths.has(month) || monthIndex === 0) {
                 if (monthIndex > 0) {
                     let monthRow = document.createElement("tr");
                     monthRow.className = "table-secondary";
                     let monthCell = document.createElement("td");
                     monthCell.colSpan = "8";
                     monthCell.className = "fw-bold text-center";
                     monthCell.innerText = month;
                     monthRow.appendChild(monthCell);
                     tableBody.appendChild(monthRow);
                 }

                 if (!firstRowUsed) {
                     firstRowUsed = true;
                 } else {
                     existingScreens.forEach((row, key) => {
                         let clonedRow = row.cloneNode(true);
                         let inputs = clonedRow.querySelectorAll("input, select");
                         inputs.forEach((input) => {
                             let name = input.getAttribute("name");
                             if (name) {
                                 let newName = name.replace(/Screens\[\d+\]/, `Screens[${monthIndex}]`);
                                 input.setAttribute("name", newName);
                             }

                             if (input.type === "number" || input.tagName === "SELECT") {
                                 input.value = "";
                             }

                             if (input.classList.contains("totalShow") || input.classList.contains("cancelShow") || input.classList.contains("rate")) {
                                 input.setAttribute("data-index", monthIndex);
                                 input.addEventListener("input", function () {
                                     calculateActualShow(clonedRow);
                                     calculateAmount(clonedRow);
                                 });
                             }

                             if (input.classList.contains("screenType")) {
                                 input.addEventListener("change", function () {
                                     calculateActualShow(clonedRow);
                                 });
                             }
                         });

                         tableBody.appendChild(clonedRow);
                     });
                 }
             }
         });

         calculateTotalAmount();
     }




     function calculateActualShow(row) {
         let totalShows = parseInt(row.querySelector(".totalShow")?.value) || 0;
         let cancelShows = parseInt(row.querySelector(".cancelShow")?.value) || 0;
         let actualShow = Math.max(0, totalShows - cancelShows);
         let actualShowField = row.querySelector(".actualShow");
         if (actualShowField) {
             actualShowField.value = actualShow;
         }
         calculateAmount(row);
     }

     function calculateAmount(row) {
         let actualShow = parseInt(row.querySelector(".actualShow")?.value) || 0;
         let rate = parseFloat(row.querySelector(".screenPrice")?.value) || 0;
         let amountField = row.querySelector(".amount");
         let amount = actualShow * rate;
         amountField.value = amount.toFixed(2);
         calculateTotalAmount();
     }

     function calculateTotalAmount() {
         let totalAmount = 0;
         document.querySelectorAll(".amount").forEach(input => {
             totalAmount += parseFloat(input.value) || 0;
         });
         document.getElementById("totalAmount").innerText = `â‚¹${totalAmount.toFixed(2)}`;
     }

     //VALIDATION SCRIPT
     // Disable browser validation
     document.querySelector("form").setAttribute("novalidate", true);

     // Function to create or fetch an error span next to the input field
     function createFieldErrorSpan(input) {
         let errorSpan = input.nextElementSibling;

         if (!errorSpan || !errorSpan.classList.contains("error-message")) {
             errorSpan = document.createElement("span");
             errorSpan.className = "error-message text-danger small d-block mt-1";
             input.insertAdjacentElement("afterend", errorSpan);
         }

         return errorSpan;
     }

     // Function to validate an input field
     function validateInput(input) {
         let value = input.value.trim();
         let errorSpan = createFieldErrorSpan(input);
         let numericValue = parseFloat(value);

         // Reset error message
         errorSpan.innerText = "";
         input.classList.remove("is-invalid");

         // General validation: Must not be empty and must be a valid number
         if (!value || isNaN(numericValue)) {
             errorSpan.innerText = "This field is required!";
             input.classList.add("is-invalid");
             return false;
         }

         // Prevent negative numbers
         if (numericValue < 0) {
             errorSpan.innerText = "Negative values are not allowed!";
             input.classList.add("is-invalid");
             return false;
         }

         // Special validation for "Total Show" (must be at least 1)
         if (input.classList.contains("totalShow") && numericValue < 1) {
             errorSpan.innerText = "Total Show must be at least 1!";
             input.classList.add("is-invalid");
             return false;
         }

         // If all validations pass, clear the error
         errorSpan.innerText = "";
         input.classList.remove("is-invalid");
         return true;
     }

     // Attach real-time validation (Event Delegation for dynamic rows)
     document.addEventListener("input", function (event) {
         if (event.target.matches(".totalShow, .cancelShow, .rate")) {
             validateInput(event.target);
         }
     });

     // Validate inputs on form submission
     document.querySelector(".btn-success").addEventListener("click", function (event) {
         let inputs = document.querySelectorAll(".totalShow, .cancelShow, .rate");
         let isFormValid = true;

         for (let input of inputs) {
             if (!validateInput(input)) {
                 isFormValid = false;
                 input.focus(); // Focus on the first invalid input
                 event.preventDefault(); // Prevent form submission
                 return;
             }
         }

         // Validate file input
         let fileInput = document.getElementById("fileInput");
         if (!fileInput.files.length) {
             alert("Please upload a Show Statement file.");
             event.preventDefault();
             fileInput.focus();
         }
     });


     // Clear error messages dynamically when user enters valid input
     document.querySelectorAll(".totalShow, .cancelShow, .rate").forEach(input => {
         input.addEventListener("input", function () {
             let errorSpan = createFieldErrorSpan(input);
             let numericValue = parseFloat(this.value.trim());

             if (!isNaN(numericValue) && numericValue >= 0) {
                 errorSpan.innerText = ""; // Clear error message
                 this.classList.remove("is-invalid"); // Remove invalid class
             }
         });
     });

     //to month and from month
     document.addEventListener("DOMContentLoaded", function () {
         // Get the current date
         let today = new Date();

         // Format it to YYYY-MM (required for <input type="month">)
         let currentMonth = today.toISOString().slice(0, 7);

         // Set the default values for "From Month" and "To Month"
         document.getElementById("fromDate").value = currentMonth;
         document.getElementById("toDate").value = currentMonth;

         // Call generateTable function automatically after setting default values
     });

     // Ensure generateTable is called when the button is clicked
     document.getElementById("generateBtn").addEventListener("click", generateTable);
 </script>

 <script>
     document.getElementById("resetBtn").addEventListener("click", function () {
         // Remove readonly attribute from input fields
         document.getElementById("fromDate").removeAttribute("readonly");
         document.getElementById("toDate").removeAttribute("readonly");

         // Reset the input fields to the current month
         let today = new Date();
         let currentMonth = today.toISOString().slice(0, 7);
         document.getElementById("fromDate").value = currentMonth;
         document.getElementById("toDate").value = currentMonth;

         // Clear the generated table content
         document.getElementById("tableBody").innerHTML = "";

         // Hide Reset button and show Generate button
         document.getElementById("resetBtn").classList.add("d-none");
         document.getElementById("generateBtn").classList.remove("d-none");
     });
 </script>