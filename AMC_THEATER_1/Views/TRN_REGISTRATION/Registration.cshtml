@model AMC_THEATER_1.Models.TRN_REGISTRATION
@{
    ViewBag.Title = "Theater Registration";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.ShowBasicNavbar = false; // Show only the basic navbar
    ViewBag.ShowHomeIcon = true;

    ViewBag.ShowNavbar = true;
    ViewBag.ShowSideBar = true;
    var documents = ViewBag.Documents as List<AMC_THEATER_1.Models.MST_DOCS>;
    var uDocs = ViewBag.UploadedDocs as List<AMC_THEATER_1.Models.TRN_THEATRE_DOCS>; // ✅ Corrected variable name
    var isReadOnly = ViewBag.IsViewPage == true ? "readonly" : "";
   // bool isEditPage = ViewBag.IsEditPage ?? false;
    bool isViewPage = ViewBag.IsViewPage ?? false;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theater Registration Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/script.js"></script>
    @*<script src="@Url.Content("~/Scripts/TrnRegScript.js")"></script>*@

    <style>
        .container {
            margin-left: 135px; /* Set this to match the sidebar width */
            transition: margin-left 0.3s;
            padding: 15px;
        }
    </style>
</head>
<body class="bg-light ms-5">

    <div class="container col-md-11 ms-5 mt-3">
        <div class="card col-md-12 p-4 ms-5 shadow-sm rounded">
            @*<h2 class="text-center mb-4">Theatre Registration</h2>*@


            @if (ViewBag.IsEditPage == false && ViewBag.IsViewPage == false)
            {

                <h2 class="text-center bg-light p-3 mb-4">Theater Registration Application</h2>
            }


            @if (ViewBag.IsEditPage == true && ViewBag.IsViewPage == false)
            {
                <h2 class="text-center bg-light p-3 mb-4">Registration</h2>
            }


            @if (ViewBag.IsViewPage == true)
            {
                <h2 class="text-center bg-light p-3 mb-4">Theater Request</h2>
            }
            @using (Html.BeginForm("Registration", "TRN_REGISTRATION", FormMethod.Post, new { id = "TheaterForm", enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.T_ID)

                <!-- Theatre Registration Fields -->
                <div class="row ms-4">
                    <div class="col-md-4 mb-3">
                        <label for="TheaterName" class="form-label fw-bold">Theatre Name <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_NAME, new { @class = "form-control readonly-field", placeholder = "Enter theater name", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="OwnerName" class="form-label fw-bold">Owner's Name <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_OWNER_NAME, new { @class = "form-control readonly-field", placeholder = "Enter owner's name", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="RepresentativeContact" class="form-label fw-bold">Representative's Contact No. <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_OWNER_NUMBER, new { @class = "form-control readonly-field", placeholder = "Enter contact number", required = "required" })
                    </div>
                </div>

                <!-- Address, Email, Commencement Date -->
        <div class="row ms-4">
            <div class="col-md-4 mb-3">
                <label for="TheaterAddress" class="form-label fw-bold required-field">Theatre Address </label>
                @Html.TextAreaFor(m => m.T_ADDRESS, new { @class = "form-control readonly-field", rows = "3", placeholder = "Enter theater address", required = "required" })
            </div>


            <div class="col-md-4 mb-3">
                <label for="EmailID" class="form-label fw-bold">Email ID <span class="text-danger">*</span></label>
                @Html.TextBoxFor(m => m.T_OWNER_EMAIL, new { @class = "form-control readonly-field", placeholder = "Enter email ID", required = "required" })
            </div>

            <div class="col-md-4 mb-3">
                <label for="TheaterCommencementDate" class="form-label fw-bold">Theatre Commencement Date <span class="text-danger">*</span></label>
                @Html.TextBoxFor(m => m.T_COMMENCEMENT_DATE, "{0:yyyy-MM-dd}", new { @class = "form-control readonly-field", type = "date", required = "required" })

            </div>
        </div>

                <!-- City, Zone, Ward -->
                <div class="row ms-4">
                    <div class="col-md-4 mb-3">
                        <label for="City" class="form-label fw-bold">City <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_CITY, new { @class = "form-control readonly-field ddrread", placeholder = "Enter city", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="Zone" class="form-label fw-bold">Zone <span class="text-danger">*</span></label>
                        @Html.DropDownListFor(m => m.T_ZONE, new SelectList(new[] { "Zone1", "Zone2", "Zone3", "Zone4" }), "-- Select Zone --",
                     new { @class = "form-control readonly-field ddrread", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="WardZone" class="form-label fw-bold">Ward <span class="text-danger">*</span></label>
                        @Html.DropDownListFor(m => m.T_WARD, new SelectList(new[] { "Ward1", "Ward2", "Ward3", "Ward4" }), "-- Select Ward Zone --",
                     new { @class = "form-control readonly-field", required = "required" })
                    </div>
                </div>

                <!-- Tax Details -->
                <div class="row ms-4">
                    <div class="col-md-4 mb-3">
                        <label for="AMCPropertyTaxTenementNo" class="form-label fw-bold">AMC Property Tax Tenement No <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_TENAMENT_NO, new { @class = "form-control readonly-field", placeholder = "Tenement No", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="AMCProfessionalTaxPECNo" class="form-label fw-bold">AMC Professional Tax PEC No <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_PEC_NO, new { @class = "form-control readonly-field", placeholder = "PEC No", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="PRCNo" class="form-label fw-bold">PRC No <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_PRC_NO, new { @class = "form-control readonly-field", placeholder = "PRC No", required = "required" })
                    </div>
                </div>

                <!-- Tax Payment -->
                <div class="col-12 ms-4 fw-bold">
                    <label for="TheaterTaxPaidOffline" class="form-label fw-bold">Has Theatre Tax been paid offline? <span class="text-danger">*</span></label>
                    <div class="form-check d-inline-block me-3">
                        @Html.RadioButtonFor(m => m.T_TAX_PAYING_OFFLINE, "true", new { @class = "form-check-input readonly-field", id = "yes", required = "required", onclick = "toggleFields(true)" })
                        <label class="form-check-label" for="yes">Yes</label>
                    </div>
                    <div class="form-check d-inline-block">
                        @Html.RadioButtonFor(m => m.T_TAX_PAYING_OFFLINE, "false", new { @class = "form-check-input readonly-field", id = "no", required = "required", onclick = "toggleFields(false)" })
                        <label class="form-check-label" for="no">No</label>
                    </div>
                </div>

                <div id="offlineTaxDetails" class="ms-4" style="display: none;">
                    <div class="row">
                        <div class="col-md-4 d-inline-block fw-bold">
                            <p>OFFLINE_TAX_PAYMENT: @*@Model?.OFFLINE_TAX_PAYMENT*@</p> <!-- Debug Output -->
                            <input type="text" id="offlineTaxPayment" name="OFFLINE_TAX_PAYMENT"
                                   placeholder="Offline Tax Payment"
                                   class="form-control ms-3 readonly-field"
                                   value="@(Model?.OFFLINE_TAX_PAYMENT != null ? Model.OFFLINE_TAX_PAYMENT.ToString() : "")" />

                        </div>

                        <div class="col-md-4 d-inline-block fw-bold">
                            <label for="offlineTaxPaidDate" class="form-label ms-2">Offline Tax Paid Date</label>
                            <input type="date" id="offlineTaxPaidDate" name="OFFLINE_TAX_PAID_DATE"
                                   class="form-control ms-2 me-5 readonly-field"
                                   value="@Model?.OFFLINE_TAX_PAID_DATE?.ToString(" yyyy-MM-dd")" />
                        </div>


                        <div class="col-md-4 d-inline-block fw-bold">
                            <label for="offlineDueDate" class="form-label ms-1">Offline Tax Due Date</label>
                            <input type="date" id="offlineDueDate" name="OFFLINE_DUE_DATE"
                                   class="form-control ms-1 readonly-field"
                                   value="@Model?.OFFLINE_DUE_DATE?.ToString(" yyyy-MM-dd")" />
                        </div>
                    </div>
                </div>


                <!-- Grid Table for Screen Capacity -->
                <table id="screenCapacityTable" class="table table-bordered text-center mt-3">
                    <thead>
                        <tr>
                            <th>Screen No</th>
                            <th>Seat Capacity</th>
                            <th>Screen Type</th>
                            <th class="HideAtDept">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="">
                        @if (ViewBag.screens != null && ViewBag.screens.Count > 0)
                        {
                            int screenNo = 1;
                            foreach (var screen in ViewBag.screens)
                            {
                                <tr>
                                    <td>@screenNo</td>
                                    <td>
                                        <input type="number" name="seatCapacity" class="form-control readonly-field text-end"
                                               value="@screen.AUDIENCE_CAPACITY" required oninput="updateScreenType(this)">
                                    </td>
                                    <td>
                                        <input type="text" name="screenType" class="form-control ms-4" value="@screen.SCREEN_TYPE" readonly>
                                    </td>
                                    <td class="HideAtDept">
                                        <button type="button" class="btn btn-primary me-2" onclick="addScreen()" title="Add Screen">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                        <button type="button" class="btn btn-warning me-2" onclick="editRow(this)" title="Edit Screen">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-danger me-2" onclick="removeRow(this)" title="Delete Screen">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                                screenNo++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td>1</td>
                                <td>
                                    <input type="number" name="seatCapacity" class="form-control ms-4" required oninput="updateScreenType(this)">
                                </td>
                                <td>
                                    <input type="text" name="screenType" class="form-control ms-4" readonly>
                                </td>
                                <td class="HideAtDept">
                                    <button type="button" class="btn btn-primary me-2" onclick="addScreen()" title="Add Screen">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                    <button type="button" class="btn btn-warning me-2" onclick="editRow(this)" title="Edit Screen">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger me-2" onclick="removeRow(this)" title="Delete Screen">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <h2 class="text-bg-light p-2">Upload Required Documents :</h2>
                <div class="row">
                    <div class="col-md-12">
                        <table class="table table-bordered  table-striped">
                            <thead>
                                <tr>
                                    <th class="fw-bold">Document Name</th>
                                    <th class="fw-bold">Document Type</th>
                                    <th class="fw-bold">Allowed Size (MB)</th>
                                    <th class="fw-bold">Uploaded Size (MB)</th>
                                    <th class="fw-bold HideAtDept">Upload</th>
                                    <th class="fw-bold">View</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var doc in documents)
                                {
                                    var uploadedDoc = (uDocs)?.FirstOrDefault(d => d.DOC_ID == doc.DOC_ID);
                                    string filePath = uploadedDoc?.DOC_FILEPATH ?? string.Empty;

                                    <tr>
                                        <td>@doc.DOC_NAME</td>
                                        <td>JPG</td>
                                        <td>@doc.FILE_SIZE_MB MB</td>
                                        <td id="size-@doc.DOC_ID">@(filePath != "" ? GetFileSize(filePath) + " MB" : "0 MB")</td>



                                        <td class="HideAtDept">
                                            <input type="file"
                                                   class="form-control"
                                                   id="file-@doc.DOC_ID"
                                                   name="@doc.DOC_ID"
                                                   accept=".pdf,.jpg,.png,.docx"
                                                   onchange="updateFileSize('@doc.DOC_ID'); showViewButton('@doc.DOC_ID', this)" />

                                        </td>

                                        <td id="viewBtn-@doc.DOC_ID">
                                            @if (!string.IsNullOrEmpty(filePath))
                                            {
                                                <a href="@Url.Content("~/UploadedFiles/" + Path.GetFileName(filePath))"
                                                   target="_blank"
                                                   class="btn btn-primary btn-sm">View</a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not Available</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                @functions {
                    public string GetFileSize(string filePath)
                    {
                        string fullPath = HttpContext.Current.Server.MapPath("~/UploadedFiles/" + Path.GetFileName(filePath));
                        if (System.IO.File.Exists(fullPath))
                        {
                            long fileSize = new System.IO.FileInfo(fullPath).Length;
                            return (fileSize / (1024.0 * 1024.0)).ToString("0.##");
                        }
                        return "0";
                    }
                }

                <!-- Include Font Awesome for icons -->
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
                <div class="text-center">
                    <form method="post">
                        @if (ViewBag.Mode == "create")
                        {
                            <button type="submit" class="btn btn-success mt-4 w-25">Submit</button> }
                        else if (ViewBag.Mode == "edit")
                        {
                            <button type="submit" class="btn btn-success" onclick="enableEditMode()">Update</button>

                            <button type="button" class="btn btn-warning" onclick="location.href='@Url.Action("List_of_Application", "Home")'">Cancel</button>
                        }
                        else if (ViewBag.Mode == "view")
                        {
                            <button type="button" class="btn btn-secondary" onclick="window.history.back()">Back</button>
                        }
                        else if (ViewBag.Mode == "approve")
                        {
                            Layout = "~/Views/Shared/_Deptpage.cshtml";
                            ViewBag.ShowBasicNavbar1 = true; // Show only the basic navbar
                            ViewBag.ShowNavbar1 = true;
                            ViewBag.ShowSideBar1 = true;
                            ViewBag.Login1 = false;
                            ViewBag.ModuleDept = true;
                            @Html.HiddenFor(m => m.T_ID)
                                ViewBag.IsViewPAge = true;
                            <input type="hidden" id="actionType" name="actionType" />
                            <input type="hidden" id="rejectReasonInput" name="rejectReason" />

                            <button type="submit" class="btn btn-success" onclick="setAction('Approve')">
                                <i class="fa fa-check"></i> Approve
                            </button>

                            <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#rejectModal">
                                <i class="fa fa-times"></i> Reject
                            </button>

                            <div class="modal fade" id="rejectModal" tabindex="-1" role="dialog">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Provide a Reason for Rejection</h5>
                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                        </div>
                                        <div class="modal-body">
                                            <textarea id="rejectReason" class="form-control" rows="4" placeholder="Enter reason here..."></textarea>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                            <button type="button" class="btn btn-danger" onclick="setAction('Reject')">Reject</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        }
                        else if (ViewBag.Mode == "back")
                        {
                            <button type="button" class="btn btn-secondary" onclick="window.history.back()">Back</button>
                        }
                       
                    </form>


                    <!-- Reject Reason Modal -->
                    <div class="modal fade" id="rejectModal" tabindex="-1" role="dialog" aria-labelledby="rejectModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="rejectModalLabel">Please Provide a Reason for Rejection</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <textarea id="rejectReason" class="form-control" rows="4" placeholder="Enter reason here..."></textarea>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-danger" onclick="submitRejection()">Reject</button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            }
</body>
</html>


@*SCRIPT*@
@*offlineTax *@
<script>
function makeDropdownReadonly(className) {
    let elements = document.querySelectorAll("." + className);
    elements.forEach(el => {
        el.addEventListener("mousedown", function (event) {
            event.preventDefault(); // Prevents opening the dropdown
        });

        el.style.backgroundColor = "#e9ecef"; // Light gray background (like readonly)
        el.style.pointerEvents = "none"; // Prevents clicking
        el.style.opacity = "1"; // Ensures visibility
        el.style.color = "#495057"; // Matches text color of readonly input
    });
}

document.addEventListener("DOMContentLoaded", function () {
    @if (ViewBag.IsViewPage == true) {
        @:makeDropdownReadonly("readonly-field");
    }
});
</script>


@*offlineTax payment and dates *@
<script>
document.addEventListener("DOMContentLoaded", function () {
    var offlineTaxPaidDate = '@(Model?.OFFLINE_TAX_PAID_DATE?.ToString("yyyy-MM-dd"))';
    var offlineDueDate = '@(Model?.OFFLINE_DUE_DATE?.ToString("yyyy-MM-dd"))';

    document.getElementById('offlineTaxPaidDate').value = offlineTaxPaidDate || '';
    document.getElementById('offlineDueDate').value = offlineDueDate || '';
});
</script>
<script>
    // Assuming these values come from the server-side and are already available in registrationData
    var offlineTaxPaidDate = registrationData.OFFLINE_TAX_PAID_DATE;
    var offlineDueDate = registrationData.OFFLINE_DUE_DATE;

    // Set the values of the input fields with the correct date format
    document.getElementById('offlineTaxPaidDate').value = offlineTaxPaidDate ? offlineTaxPaidDate.toISOString().split('T')[0] : '';
    document.getElementById('offlineDueDate').value = offlineDueDate ? offlineDueDate.toISOString().split('T')[0] : '';
</script>

@*offlineTax button yes and no*@
<script>
    // Function to toggle visibility of #offlineTaxDetails
    function toggleFields(isOffline) {
        const offlineTaxDetails = document.getElementById('offlineTaxDetails');

        // Show the section if "Yes" is selected; hide it otherwise
        if (isOffline) {
            offlineTaxDetails.style.display = 'block';
        } else {
            offlineTaxDetails.style.display = 'none';
        }
    }

    // Attach event listener on DOMContentLoaded for initialization
    document.addEventListener('DOMContentLoaded', () => {
        const yesRadio = document.getElementById('yes');
        const noRadio = document.getElementById('no');

        // Initialize visibility based on pre-selected option
        if (yesRadio.checked) {
            toggleFields(true);
        } else if (noRadio.checked) {
            toggleFields(false);
        }

        // Add click event listeners for runtime changes
        yesRadio.addEventListener('click', () => toggleFields(true));
        noRadio.addEventListener('click', () => toggleFields(false));
    });
</script>


<!-- JavaScript to Hide Elements -->
<script>
function hideElementsByClass(HideAtDept) {
    let elements = document.querySelectorAll("." + HideAtDept);
    elements.forEach(el => el.style.display = "none");
}

document.addEventListener("DOMContentLoaded", function () {
    @if (ViewBag.IsViewPage == true) // If condition is true, call the function
    {
        @:hideElementsByClass("HideAtDept");
    }
});
</script>


<!-- Hidden input to store screen data -->
@*addScreen for update*@
<input type="hidden" id="screenData" name="screenData">
<script>
    function addScreen() {
        var table = document.getElementById("screenCapacityTable").getElementsByTagName('tbody')[0];
        var rowCount = table.rows.length;
        var newRow = table.insertRow(rowCount);

        newRow.innerHTML = ` <td>${rowCount + 1}
        </td>
          <td><input type="number" name="seatCapacity" class="form-control ms-4" required oninput="updateScreenType(this)"></td>
          <td><input type="text" name="screenType" class="form-control" me-1 readonly></td>
          <td>
           <button type="button" class="btn btn-primary me-2" onclick="addScreen()" title="Add Screen">
            <i class="fas fa-plus"></i>
           </button>
           <button type="button" class="btn btn-warning me-2" onclick="editRow(this)" title="Edit Screen">
            <i class="fas fa-edit"></i>
           </button>
           <button type="button" class="btn btn-danger me-2" onclick="removeRow(this)" title="Delete Screen">
            <i class="fas fa-trash-alt"></i>
        </td>`
    }

    function removeRow(button) {
        var row = button.parentNode.parentNode;
        row.parentNode.removeChild(row);
    }

    function editRow(button) {
        var row = button.parentNode.parentNode;
        var seatCapacityInput = row.cells[1].querySelector("input");
        seatCapacityInput.removeAttribute("readonly");
    }

    function updateScreenType(input) {
        var seatCapacity = input.value;
        var row = input.parentNode.parentNode;
        var screenTypeInput = row.cells[2].querySelector("input");

        if (seatCapacity > 125) {
            screenTypeInput.value = "Theater";
        } else {
            screenTypeInput.value = "Video";
        }
    }
</script>

@*update document File Size*@
<script>
    function updateFileSize(docId) {
        const inputElement = document.getElementById(`file-${docId}`);
        const sizeElement = document.getElementById(`size-${docId}`);

        if (inputElement.files.length > 0) {
            // Get file size in bytes
            const fileSizeBytes = inputElement.files[0].size;

            // Convert to MB
            const fileSizeMB = (fileSizeBytes / (1024 * 1024)).toFixed(2);

            // Update size column
            sizeElement.textContent = `${fileSizeMB} MB`;

            // Validate file size (Max: 5 MB)
            if (fileSizeMB > 5) {
                alert("The selected file exceeds the maximum allowed size of 5 MB. Please select a smaller file.");
                inputElement.value = ""; // Clear input
                sizeElement.textContent = "0 MB"; // Reset size
            }
        } else {
            sizeElement.textContent = "0 MB";
        }
    }

    function showViewButton(docId, input) {
        if (input.files.length > 0) {
            let file = input.files[0];
            let fileURL = URL.createObjectURL(file);

            document.getElementById(`viewBtn-${docId}`).innerHTML =
                `<a href='${fileURL}' target='_blank' class='btn btn-primary btn-sm'>View</a>`;
        }
    }
</script>


@*addScreen for registration *@
<script>
    let screenCount = 1; // Initial screen count

    function addScreen() {
        const tableBody = document.getElementById('screenCapacityTable').querySelector('tbody');

        if (screenCount >= 10) {
            alert("You can add up to 10 screens only.");
            return;
        }

        const lastRow = tableBody.querySelector('tr:last-child');
        if (lastRow) {
            const seatCapacityInput = lastRow.querySelector('input[name="seatCapacity"]');
            if (seatCapacityInput && seatCapacityInput.value === '') {
                alert("Please fill in the seat capacity before adding a new screen.");
                return;
            }
            seatCapacityInput.readOnly = true;
        }

        screenCount++;
        const row =
            `<tr>
        <td>${screenCount}</td>
        <td>
             <input type="number" name="seatCapacity" class="form-control ms-4" required oninput="updateScreenType(this)">
         </td>
         <td>
             <input type="text" name="screenType" class="form-control ms-4" readonly>
         </td>
         <td>
             <button type="button" class="btn btn-primary me-2 " onclick="addScreen()">
                 <i class="fas fa-plus"></i>
             </button>
             <button type="button" class="btn btn-warning me-2" onclick="editRow(this)">
                 <i class="fas fa-edit"></i>
             </button>
             <button type="button" class="btn btn-danger me-2" onclick="removeRow(this)">
                 <i class="fas fa-trash-alt"></i>
             </button>
         </td>
      </tr>`;

        tableBody.insertAdjacentHTML('beforeend', row);
        updateAddScreenButtons();
    }

    function updateScreenType(input) {
        const seatCapacity = parseInt(input.value, 10);
        const row = input.closest('tr');
        const screenTypeInput = row.querySelector('input[name="screenType"]');

        if (!isNaN(seatCapacity)) {
            screenTypeInput.value = seatCapacity > 125 ? 'Theater' : 'Video';
        } else {
            screenTypeInput.value = '';
        }
    }

    function editRow(button) {
        const row = button.closest('tr');
        const seatCapacityInput = row.querySelector('input[name="seatCapacity"]');

        if (seatCapacityInput.readOnly) {
            seatCapacityInput.readOnly = false;
            button.innerHTML = '<i class="fas fa-save"></i>';
            button.classList.remove("btn-warning");
            button.classList.add("btn-success");
        } else {
            seatCapacityInput.readOnly = true;
            button.innerHTML = '<i class="fas fa-edit"></i>';
            button.classList.remove("btn-success");
            button.classList.add("btn-warning");
        }
    }

    function removeRow(button) {
        const row = button.closest('tr');
        row.remove();
        updateScreenNumbers();

        const tableBody = document.getElementById('screenCapacityTable').querySelector('tbody');
        if (tableBody.querySelectorAll('tr').length === 0) {
            screenCount = 0;
            addScreen();
        }

        updateAddScreenButtons();
    }

    function updateScreenNumbers() {
        const rows = document.querySelectorAll('#screenCapacityTable tbody tr');
        screenCount = rows.length;

        rows.forEach((row, index) => {
            const screenNoCell = row.querySelector('td:first-child');
            screenNoCell.textContent = index + 1;
        });
    }

    function updateAddScreenButtons() {
        const rows = document.querySelectorAll('#screenCapacityTable tbody tr');
        rows.forEach((row, index) => {
            const addScreenButton = row.querySelector('.btn-primary');
            addScreenButton.style.display = index === rows.length - 1 ? "inline-block" : "none";
        });
    }

    function serializeScreenData() {
        const tableBody = document.getElementById('screenCapacityTable').querySelector('tbody');
        const rows = tableBody.querySelectorAll('tr');
        const screens = [];

        rows.forEach((row) => {
            const seatCapacity = row.querySelector('input[name="seatCapacity"]').value;
            const screenType = row.querySelector('input[name="screenType"]').value;
            screens.push({
                SeatCapacity: parseInt(seatCapacity),
                ScreenType: screenType
            });
        });

        document.getElementById('screenData').value = JSON.stringify(screens);
    }

    document.querySelector('form').addEventListener('submit', serializeScreenData);
    updateAddScreenButtons();
</script>
@*Edit readonly-field *@
<script>
    function enableEditMode() {
        // Select all fields with the class "readonly-field" and remove the readonly attribute
        document.querySelectorAll(".readonly-field").forEach(field => {
            field.removeAttribute("readonly");
        });

        // Optionally focus on the first input field after enabling edit mode
        document.querySelector(".readonly-field")?.focus();
    }
</script>
@*rejectReason*@
<script>
    function setAction(actionType) {
        document.getElementById("actionType").value = actionType;

        if (actionType === "Reject") {
            var reason = document.getElementById("rejectReason").value.trim();
            if (reason === "") {
                alert("Please provide a reason for rejection.");
                return;
            }
            document.getElementById("rejectReasonInput").value = reason;
        } else {
            document.getElementById("rejectReasonInput").value = ""; // Clear reason if approved
        }

        setTimeout(() => {
            document.getElementById("TheaterForm").submit();
        }, 500);
    }
</script>

@*Keep fields readonly for update*@
<script>
     document.addEventListener("DOMContentLoaded", function () {
        let isViewPage = @Html.Raw(Json.Encode(isViewPage));

        if (isViewPage) {
            // Keep fields readonly in Approve/Reject mode
            document.querySelectorAll(".readonly-field").forEach(field => {
                field.readOnly = true;
            });
        } else {
            // Allow editing if not in Approve/Reject mode
            document.getElementById("updateBtn")?.addEventListener("click", function () {
                document.querySelectorAll(".readonly-field").forEach(field => {
                    field.removeAttribute("readonly");
                });
            });
        }
    });
</script>

@*rejectReasonInput*@
<script>
    function submitRejection() {
        var reason = document.getElementById("rejectReason").value;

        if (reason != "") {
            // Close the modal
            $('#rejectModal').modal('hide');

            // Set the action to "Reject" and submit the form
            document.getElementById("action").value = "Reject";
            document.getElementById("rejectReasonInput").value = reason;
            document.getElementById("TheaterForm").submit(); // Replace "yourFormId" with the actual ID of your form
        } else {
            alert("Please provide a reason for rejection.");
        }
    }
</script>
@*To Search City*@
<!--<script>
    // Predefined list of possible addresses in Ahmedabad
    var addressList = [
        'Ahmedabad, Gujarat, India',
        'Sarkhej, Ahmedabad',
        'Vastrapur, Ahmedabad',
        'Prahlad Nagar, Ahmedabad',
        'Maninagar, Ahmedabad',
        'Navrangpura, Ahmedabad',
        'Bopal, Ahmedabad',
        'Ambli, Ahmedabad',
        'Shahibaug, Ahmedabad',
        'Ashram Road, Ahmedabad',
        'Nikol, Ahmedabad',
        'Naroda, Ahmedabad'
    ];
    var input = document.getElementById('TheaterAddress');
    var suggestionsContainer = document.getElementById('addressSuggestions');
    // Function to filter and show suggestions
    input.addEventListener('input', function () {
        var query = input.value.toLowerCase();
        suggestionsContainer.innerHTML = ''; // Clear previous suggestions
        if (query.length > 0) {
            var filteredAddresses = addressList.filter(function (address) {
                return address.toLowerCase().includes(query); // Case-insensitive search
            });
            if (filteredAddresses.length > 0) {
                suggestionsContainer.style.display = 'block'; // Show suggestions
                filteredAddresses.forEach(function (address) {
                    var listItem = document.createElement('li');
                    listItem.classList.add('list-group-item');
                    listItem.textContent = address;
                    listItem.addEventListener('click', function () {
                        input.value = address; // Fill input with selected address
                        suggestionsContainer.style.display = 'none'; // Hide suggestions
                    });
                    suggestionsContainer.appendChild(listItem);
                });
            } else {
                suggestionsContainer.style.display = 'none'; // Hide suggestions if no match
            }
        } else {
            suggestionsContainer.style.display = 'none'; // Hide suggestions if input is empty
        }
    });
    // Hide suggestions when clicking outside the input or suggestions list
    document.addEventListener('click', function (event) {
        if (!input.contains(event.target) && !suggestionsContainer.contains(event.target)) {
            suggestionsContainer.style.display = 'none';
        }
    });
</script>-->



<!-- jQuery and Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
