@model AMC_THEATER_1.Models.TRN_REGISTRATION
@{
    ViewBag.Title = "Theater Registration";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.ShowBasicNavbar = false; // Show only the basic navbar
    ViewBag.ShowHomeIcon = true;
    ViewBag.Module = true;

    ViewBag.ShowNavbar = true;
    ViewBag.ShowSideBar = true;
    var documents = ViewBag.Documents as List<AMC_THEATER_1.Models.MST_DOCS>;

    var uDocs = ViewBag.UploadedDocs as List<AMC_THEATER_1.Models.TRN_THEATRE_DOCS>; // ✅ Corrected variable name    var isReadOnly = ViewBag.IsViewPage == true ? "readonly" : "";
                                                                                     // bool isEditPage = ViewBag.IsEditPage ?? false;
    bool isViewPage = ViewBag.IsViewPage ?? false;
    var screenList = Model.NO_OF_SCREENS.ToList();  // Convert to List
    var documentList = ViewBag.Documents as List<AMC_THEATER_1.Models.MST_DOCS> ?? new List<AMC_THEATER_1.Models.MST_DOCS>();
    var uploadedDocs = ViewBag.UploadedDocuments as List<AMC_THEATER_1.Models.TRN_THEATRE_DOCS> ?? new List<AMC_THEATER_1.Models.TRN_THEATRE_DOCS>();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theater Registration Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/Scripts/script.js"></script>

    <style>
        .container {
            margin-left: 135px; /* Set this to match the sidebar width */
            transition: margin-left 0.3s;
            padding: 15px;
        }
    </style>
</head>
<body class="bg-light ms-5">

    <div class="container col-md-11 ms-5 mt-3">
        <div class="card col-md-12 p-4 ms-5 shadow-sm rounded">


            @if (ViewBag.Mode == "create")
            {

                <h2 class="text-center bg-light p-3 mb-4">Theater Registration Application</h2>
            }

            @if (ViewBag.Mode == "edit" || ViewBag.Mode == "view")
            {
                <h2 class="text-center bg-light p-3 mb-4">Theater Registration</h2>
            }

            @if (ViewBag.Mode == "approve")
            {
                <h2 class="text-center bg-light p-3 mb-4">Theater Request</h2>
            }

            @using (Html.BeginForm("Registration", "TRN_REGISTRATION", FormMethod.Post, new { id = "TheaterForm", enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="T_ID" /> <!-- ✅ Keep T_ID for edit mode -->

                <!-- Theatre Registration Fields -->
                <div class="row ms-4">
                    <div class="col-md-4 mb-3">
                        <label for="T_NAME" class="form-label fw-bold">Theatre Name</label>
                        @Html.TextBoxFor(m => m.T_NAME, new { @class = "form-control readonly-field", placeholder = "Enter theater name", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="LICENSE_HOLDER_NAME" class="form-label fw-bold">Theater License Holder Name <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.LICENSE_HOLDER_NAME, new { @class = "form-control readonly-field", placeholder = "Enter owner's name", required = "required" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="T_OWNER_NUMBER" class="form-label fw-bold">Representative / Manager Contact No.</label>
                        @Html.TextBoxFor(m => m.T_OWNER_NUMBER, new { @class = "form-control readonly-field", placeholder = "Enter contact number", required = "required" })
                    </div>


                </div>

                <!-- Address, Email, Commencement Date -->
                <div class="row ms-4">
                    <div class="col-md-4 mb-3">
                        <label for="MANAGER_NAME" class="form-label fw-bold">Representative / Manager  Name <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.MANAGER_NAME, new { @class = "form-control readonly-field", placeholder = "Enter Manager Name" })
                    </div>


                    <div class="col-md-4 mb-3">
                        <label for="T_OWNER_EMAIL" class="form-label fw-bold">Email ID <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_OWNER_EMAIL, new { @class = "form-control readonly-field", placeholder = "Enter email ID", required = "required" })
                    </div>
                </div>

                <div class="row ms-4">
                    <div class="col-md-8 mb-3">
                        <label for="T_ADDRESS" class="form-label fw-bold required-field">Theatre Address </label>
                        @Html.TextAreaFor(m => m.T_ADDRESS, new { @class = "form-control readonly-field", rows = "1", style = "max-width:92%", placeholder = "Enter theater address", required = "required" })
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="T_CITY" class="form-label fw-bold">City <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_CITY, new { @class = "form-control readonly-field ddrread", placeholder = "Enter city", required = "required" })
                    </div>
                </div>
                <div class="row ms-4">
                    <div class="col-md-4 mb-3">
                        <label for="T_COMMENCEMENT_DATE" class="form-label fw-bold">Theatre Commencement Date <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_COMMENCEMENT_DATE, "{0:yyyy-MM-dd}", new { @class = "form-control readonly-field", type = "date", required = "required" })

                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="T_COMMENCEMENT_DATE" class="form-label fw-bold">License Date <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.LICENSE_DATE, "{0:yyyy-MM-dd}", new { @class = "form-control readonly-field", type = "date" })

                    </div>
                </div>


                <!-- City, Zone, Ward -->
                <div class="row ms-4">

                    <div class="col-md-4 mb-3">
                        <label for="T_TENAMENT_NO" class="form-label fw-bold">AMC Property Tax Tenement No <span class="text-danger">*</span></label>
                        @Html.TextBoxFor(m => m.T_TENAMENT_NO, new { @class = "form-control readonly-field", placeholder = "Tenement No", required = "required" })
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="T_ZONE" class="form-label fw-bold">Zone <span class="text-danger">*</span></label>
                        @Html.DropDownListFor(m => m.T_ZONE, new SelectList(new[] { "Zone1", "Zone2", "Zone3", "Zone4" }), "-- Select Zone --",
                     new { @class = "form-control readonly-field ddrread" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="T_WARD" class="form-label fw-bold">Ward <span class="text-danger">*</span></label>
                        @Html.DropDownListFor(m => m.T_WARD, new SelectList(new[] { "Ward1", "Ward2", "Ward3", "Ward4" }), "-- Select Ward Zone --",
                     new { @class = "form-control readonly-field" })
                    </div>
                </div>

                <!-- Tax Details -->
                <div class="row ms-4">

                    <div class="col-md-4 mb-3">
                        <label for="T_PEC_NO" class="form-label fw-bold">AMC Professional Tax PEC No </label>
                        @Html.TextBoxFor(m => m.T_PEC_NO, new { @class = "form-control readonly-field", placeholder = "PEC No" })
                    </div>

                    <div class="col-md-4 mb-3">
                        <label for="T_PRC_NO" class="form-label fw-bold">PRC No</label>
                        @Html.TextBoxFor(m => m.T_PRC_NO, new { @class = "form-control readonly-field", placeholder = "PRC No" })
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="PROPERTY_TYPE" class="form-label fw-bold">Property Type</label>
                        @Html.DropDownListFor(m => m.PROPERTY_TYPE,
                            new List<SelectListItem>
                            {
                                new SelectListItem { Text = "-- Select --", Value = "" },
                                new SelectListItem { Text = "Self", Value = "Self" },
                                new SelectListItem { Text = "Tenant", Value = "Tenant" }
                            },
                            new { @class = "form-control" })
                    </div>

                </div>

                <!-- Tax Payment -->
                <div class="col-12 ms-4 fw-bold">
                    <label for="T_TAX_PAYING_OFFLINE" class="form-label fw-bold">
                        Already Paying Theater Tax Offline <span class="text-danger">*</span>
                    </label>

                    <div class="form-check d-inline-block me-3">
                        @Html.RadioButtonFor(m => m.T_TAX_PAYING_OFFLINE, "true", new { @class = "form-check-input", id = "yes", required = "required" })
                        <label for="yes" class="form-check-label">Yes</label> <!-- ✅ Fixed for="yes" -->
                    </div>

                    <div class="form-check d-inline-block">
                        @Html.RadioButtonFor(m => m.T_TAX_PAYING_OFFLINE, "false", new { @class = "form-check-input", id = "no", required = "required" })
                        <label for="no" class="form-check-label">No</label> <!-- ✅ Fixed for="no" -->
                    </div>
                </div>

                <!-- ✅ Corrected ID for toggling -->
                <div id="OFFLINE_TAX_PAYMENT" class="ms-4" style="display: none;">
                    <div class="row">
                        <div class="col-md-4 d-inline-block fw-bold">
                            <label for="offlineTaxPayment" class="form-label ms-2">Offline Tax Payment</label>
                            <input type="text" id="offlineTaxPayment" name="OFFLINE_TAX_PAYMENT"
                                   class="form-control ms-3"
                                   placeholder="Offline Tax Payment"
                                   value="@(Model?.OFFLINE_TAX_PAYMENT != null ? Model.OFFLINE_TAX_PAYMENT.ToString() : "")" />
                        </div>

                        <div class="col-md-4 d-inline-block fw-bold">
                            <label for="offlineTaxPaidMonth" class="form-label ms-2">Offline Tax Paid Month</label>
                            <select id="offlineTaxPaidMonth" class="form-control ms-2 me-5">
                                <option value="">-- Select Month --</option>
                                <option value="01">January</option>
                                <option value="02">February</option>
                                <option value="03">March</option>
                                <option value="04">April</option>
                                <option value="05">May</option>
                                <option value="06">June</option>
                                <option value="07">July</option>
                                <option value="08">August</option>
                                <option value="09">September</option>
                                <option value="10">October</option>
                                <option value="11">November</option>
                                <option value="12">December</option>
                            </select>
                            <input type="hidden" id="offlineTaxPaidDate" name="OFFLINE_TAX_PAID_DATE" />
                        </div>

                        <script>
    document.addEventListener("DOMContentLoaded", function () {
        let storedDate = "@Model?.OFFLINE_TAX_PAID_DATE?.ToString("yyyy-MM-dd")"; // Get stored date
        let selectedMonth = storedDate ? storedDate.split("-")[1] : ""; // Extract month (MM)
        let selectedYear = storedDate ? storedDate.split("-")[0] : new Date().getFullYear(); // Extract year or set current year

        let monthDropdown = document.getElementById("offlineTaxPaidMonth");
        let hiddenDateField = document.getElementById("offlineTaxPaidDate");

        // Preselect month if available
        if (selectedMonth) {
            monthDropdown.value = selectedMonth;
        }

        function updateHiddenField() {
            let selectedMonth = monthDropdown.value;
            if (selectedMonth) {
                hiddenDateField.value = selectedYear + "-" + selectedMonth + "-01"; // Store as YYYY-MM-01
            }
        }

        monthDropdown.addEventListener("change", updateHiddenField);
        updateHiddenField(); // Initialize hidden field on page load
    });
                        </script>

                        <div class="col-md-4 d-inline-block fw-bold">
                            <label for="offlineDueYear" class="form-label ms-1">Offline Tax Due Year</label>
                            <select id="offlineDueYear" class="form-control ms-1">
                                <!-- Year options will be added dynamically -->
                            </select>
                            <input type="hidden" id="offlineDueDate" name="OFFLINE_DUE_DATE" />
                        </div>


                    </div>
                </div>

                <script>
    document.addEventListener("DOMContentLoaded", function () {
        let currentYear = new Date().getFullYear();
        let dropdown = document.getElementById("offlineDueYear");
        let storedYear = "@(Model?.OFFLINE_DUE_DATE?.Year)"; // Get stored year from model

        // Populate dropdown with last 50 years
        for (let i = currentYear; i >= currentYear - 50; i--) {
            let option = document.createElement("option");
            option.value = i;
            option.textContent = i;
            if (i == storedYear) {
                option.selected = true; // Select the stored year
            }
            dropdown.appendChild(option);
        }

        // Set hidden field value
        function updateDueDate() {
            let selectedYear = dropdown.value;
            document.getElementById("offlineDueDate").value = selectedYear + "-01-01"; // Store as full date
        }

        dropdown.addEventListener("change", updateDueDate);
        updateDueDate(); // Initialize hidden field on page load
    });
                </script>

                <!-- Grid Table for Screen Capacity -->
                <table id="screenCapacityTable" class="table table-bordered text-center mt-3">
                    <thead>
                        <tr>
                            <th>Screen No</th>
                            <th>Seat Capacity</th>
                            <th>Screen Type</th>
                            <th class="HideAtDept">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="" id="screenTableBody">
                        @if (Model.NO_OF_SCREENS != null && Model.NO_OF_SCREENS.Any())
                        {
                            var screen_List = Model.NO_OF_SCREENS.ToList(); // Convert ICollection to List

                            for (int screenNo = 0; screenNo < screenList.Count; screenNo++)
                            {
                                <tr>
                                    <td>
                                        <input type="hidden" name="NO_OF_SCREENS[@screenNo].T_ID" value="@screenList[screenNo].T_ID">

                                        <input type="text" name="NO_OF_SCREENS[@screenNo].SCREEN_NO" class="form-control ms-4"
                                               value="@screenList[screenNo].SCREEN_NO">
                                    </td>

                                    <td>
                                        <input type="number" name="NO_OF_SCREENS[@screenNo].AUDIENCE_CAPACITY" class="form-control readonly-field text-end"
                                               value="@screenList[screenNo].AUDIENCE_CAPACITY" required oninput="updateScreenType(this)">
                                    </td>
                                    <td>
                                        <input type="text" name="NO_OF_SCREENS[@screenNo].SCREEN_TYPE" class="form-control ms-4"
                                               value="@screenList[screenNo].SCREEN_TYPE" readonly>
                                    </td>
                                    <td class="HideAtDept">
                                        <button type="button" class="btn btn-primary me-2" onclick="addScreen()" title="Add Screen">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                        <button type="button" class="btn btn-danger me-2" onclick="removeRow(this)" title="Delete Screen">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>

                </table>




                <h2 class="text-bg-light p-2">Upload Required Documents:</h2>

                <div class="row">

                    <div class="col-md-12">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th class="fw-bold">Document Name</th>
                                    <th class="fw-bold">Document Type</th>
                                    <th class="fw-bold">Allowed Size (MB)</th>
                                    <th class="fw-bold">Uploaded Size (MB)</th>
                                    <th class="fw-bold HideAtDept">Upload</th>
                                    <th class="fw-bold">View</th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var doc in documentList)
                                {
                                    var uploadedDoc = (uDocs)?.FirstOrDefault(d => d.DOC_ID == doc.DOC_ID);
                                    string filePath = uploadedDoc?.DOC_FILEPATH ?? string.Empty;

                                    <!-- Debugging: Print matching DOC_IDs and file paths -->
                                    <tr>
                                        <td>@doc.DOC_NAME</td>
                                        <td>@doc.FILE_TYPE</td>
                                        <td>@doc.FILE_SIZE_MB MB</td>
                                        <td id="size-@doc.DOC_ID">@(filePath != "" ? GetFileSize(filePath) + " MB" : "0 MB")</td>

                                        <td class="HideAtDept">
                                            <input type="file"
                                                   class="form-control"
                                                   id="file-@doc.DOC_ID"
                                                   name="documents"
                                                   accept=".pdf,.jpg,.png,.docx"
                                                   onchange="updateFileSize('@doc.DOC_ID'); showViewButton('@doc.DOC_ID', this)" />
                                        </td>

                                        <td id="viewBtn-@doc.DOC_ID">
                                            @if (!string.IsNullOrEmpty(filePath))
                                            {
                                                <a href="@Url.Content("~/UploadedFiles/" + Path.GetFileName(filePath))"
                                                   target="_blank"
                                                   class="btn btn-primary btn-sm">View</a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not Available</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>


                        </table>
                    </div>


                </div>






                <div class="text-center">


                    @if (ViewBag.Mode == "create")
                    {
                        <button type="submit" class="btn btn-success mt-4 w-25">Submit</button> }
                    else if (ViewBag.Mode == "edit")
                    {
                        <button type="submit" class="btn btn-success" onclick="enableEditMode()">Update</button>

                        <button type="button" class="btn btn-warning" onclick="location.href='@Url.Action("List_of_Application", "Home")'">Cancel</button>
                    }
                    else if (ViewBag.Mode == "view")
                    {

                        <button type="button" class="btn btn-secondary" onclick="window.history.back()">Back</button>
                    }
                    else if (ViewBag.Mode == "approve")
                    {
                        ViewBag.ShowBasicNavbar = false;
                        ViewBag.ShowNavbar = true;
                        ViewBag.ShowSideBar = false;
                        ViewBag.ShowSideBar1 = true;
                        ViewBag.Login = false;
                        ViewBag.ShowHomeIcon = true;
                        ViewBag.Module = true;
                        ViewBag.IsViewPAge = true;
                        @Html.HiddenFor(m => m.T_ID)

                        <input type="hidden" id="actionType" name="actionType" />
                        <input type="hidden" id="rejectReasonInput" name="rejectReason" />

                        <button type="submit" class="btn btn-success" onclick="setAction('Approve')">
                            <i class="fa fa-check"></i> Approve
                        </button>

                        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#rejectModal">
                            <i class="fa fa-times"></i> Reject
                        </button>

                        <div class="modal fade" id="rejectModal" tabindex="-1" role="dialog">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Provide a Reason for Rejection</h5>
                                        <button type="button" class="btn btn-light" data-dismiss="modal">
                                            <i class="bi bi-x-lg"></i>
                                        </button>

                                    </div>
                                    <div class="modal-body">
                                        <textarea id="rejectReason" class="form-control" rows="4" placeholder="Enter reason here..." style="max-width:100%;"></textarea>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-danger" onclick="setAction('Reject')">Reject</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (ViewBag.Mode == "back" && ViewBag.IsViewPAge == true)
                    {

                        ViewBag.IsViewPAge = true;
                        <button type="button" class="btn btn-secondary" onclick="window.history.back()">Back</button>
                    }

                    <!-- Reject Reason Modal -->
                    <div class="modal fade" id="rejectModal" tabindex="-1" role="dialog" aria-labelledby="rejectModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="rejectModalLabel">Please Provide a Reason for Rejection</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <textarea id="rejectReason" class="form-control" rows="4" placeholder="Enter reason here..."></textarea>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-danger" onclick="submitRejection()">Reject</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</body>
</html>


@*SCRIPT*@



@functions {
    public string GetFileSize(string filePath)
    {
        string fullPath = HttpContext.Current.Server.MapPath("~/UploadedFiles/" + Path.GetFileName(filePath));
        if (System.IO.File.Exists(fullPath))
        {
            long fileSize = new System.IO.FileInfo(fullPath).Length;
            return (fileSize / (1024.0 * 1024.0)).ToString("0.##");
        }
        return "0";
    }
}
<!-- Hidden input to store screen data -->
<script>
    function addScreen() {
        debugger;
        const tableBody = document.querySelector("#screenTableBody"); // Ensure tbody selection
        if (!tableBody) {
            console.error("Table body not found!");
            return;
        }

        const rows = tableBody.getElementsByTagName("tr");

        if (rows.length === 0) return; // If no rows exist, do nothing

        if (rows.length >= 10) {
            alert("Maximum 10 screens can be added.");
            return;
        }

        // Validate if all fields in the last row are filled
        const lastRow = rows[rows.length - 1];
        const inputs = lastRow.querySelectorAll("input");

        for (let input of inputs) {
            if (input.value.trim() === "") {
                showErrorMessage(input, "This field is required.");

                // Attach event listener to remove error on input change
                input.addEventListener("input", function () {
                    if (input.value.trim() !== "") {
                        clearErrorMessage(input);
                    }
                });

                return;
            }
        }

        // Clone the first row to maintain consistency
        const lastIndex = rows.length; // Get new row index
        const newRow = rows[0].cloneNode(true);

        // Update input names and clear values
        newRow.querySelectorAll("input").forEach(input => {
            if (input.name) {
                input.name = input.name.replace(/\d+/, lastIndex); // Update index
                if (input.type !== "hidden") input.value = ""; // Clear values except hidden fields
            }
        });

        // Attach validation events
        newRow.querySelectorAll("input").forEach(input => {
            input.addEventListener("input", function () {
                validateInput(input);
            });
        });

        tableBody.appendChild(newRow);
    }


    function removeRow(button) {
        const tableBody = document.querySelector("#screenTableBody");
        const rows = tableBody.getElementsByTagName("tr");

        if (rows.length === 1) {
            alert("At least one screen entry must be present.");
            return;
        }

        var row = button.parentNode.parentNode;
        row.parentNode.removeChild(row);

        // If no rows are left, add a new blank row automatically
        if (tableBody.getElementsByTagName("tr").length === 0) {
            addScreen();
        }
    }


    function editRow(button) {
        var row = button.parentNode.parentNode;
        var seatCapacityInput = row.cells[1].querySelector("input");
        seatCapacityInput.removeAttribute("readonly");
    }

    function updateScreenType(input) {
        debugger;
        var seatCapacity = input.value.trim();
        var row = input.parentNode.parentNode;
        var screenTypeInput = row.cells[2].querySelector("input");

        if (!seatCapacity || isNaN(seatCapacity)) {
            showErrorMessage(input, "Please enter a valid seat capacity.");
            input.value = "";
            return;
        }

        clearErrorMessage(input);

        if (parseInt(seatCapacity) > 125) {
            screenTypeInput.value = "Theater";
        } else {
            screenTypeInput.value = "Video";
        }
    }

    function validateInput(input) {
        if (input.name.includes("SCREEN_NO")) {
            validateScreenNumber(input);
        } else if (input.name.includes("AUDIENCE_CAPACITY")) {
            updateScreenType(input);
        }
    }

    function validateScreenNumber(input) {
        const enteredNumber = input.value.trim();
        const existingScreenNumbers = [...document.querySelectorAll('input[name*=".SCREEN_NO"]')]
            .map(inp => inp.value.trim())
            .filter(value => value !== "");

        if (existingScreenNumbers.filter(num => num === enteredNumber).length > 1) {
            showErrorMessage(input, "Duplicate screen number is not allowed.");
        } else if (enteredNumber !== "") {
            clearErrorMessage(input); // ✅ Remove error when a valid number is entered
        }
    }

    function showErrorMessage(input, message) {
        let errorElement = input.nextElementSibling;
        if (!errorElement || !errorElement.classList.contains("error-message")) {
            errorElement = document.createElement("div");
            errorElement.classList.add("error-message");
            errorElement.style.color = "red";
            errorElement.style.fontSize = "12px";
            errorElement.style.marginTop = "2px";
            input.parentNode.appendChild(errorElement);
        }
        errorElement.textContent = message;
    }

    function clearErrorMessage(input) {
        const errorElement = input.nextElementSibling;
        if (errorElement && errorElement.classList.contains("error-message")) {
            errorElement.remove();
        }
    }

</script>


@*offlineTax*@

<script>
function makeDropdownReadonly(className) {
    let elements = document.querySelectorAll("." + className);
    elements.forEach(el => {
        el.addEventListener("mousedown", function (event) {
            event.preventDefault(); // Prevents opening the dropdown
        });

        el.style.backgroundColor = "#e9ecef"; // Light gray background (like readonly)
        el.style.pointerEvents = "none"; // Prevents clicking
        el.style.opacity = "1"; // Ensures visibility
        el.style.color = "#495057"; // Matches text color of readonly input
    });
}

document.addEventListener("DOMContentLoaded", function () {
    @if (ViewBag.IsViewPage == true) {
        @:makeDropdownReadonly("readonly-field");
    }
});
</script>


@*offlineTax payment and dates*@
<script>
document.addEventListener("DOMContentLoaded", function () {
    var offlineTaxPaidDate = '@(Model?.OFFLINE_TAX_PAID_DATE?.ToString("yyyy-MM-dd"))';
    var offlineDueDate = '@(Model?.OFFLINE_DUE_DATE?.ToString("yyyy-MM-dd"))';

    document.getElementById('offlineTaxPaidDate').value = offlineTaxPaidDate || '';
    document.getElementById('offlineDueDate').value = offlineDueDate || '';
});
</script>
<script>
    // Assuming these values come from the server-side and are already available in registrationData
    var offlineTaxPaidDate = registrationData.OFFLINE_TAX_PAID_DATE;
    var offlineDueDate = registrationData.OFFLINE_DUE_DATE;

    // Set the values of the input fields with the correct date format
    document.getElementById('offlineTaxPaidDate').value = offlineTaxPaidDate ? offlineTaxPaidDate.toISOString().split('T')[0] : '';
    document.getElementById('offlineDueDate').value = offlineDueDate ? offlineDueDate.toISOString().split('T')[0] : '';
</script>

@*offlineTax button yes and no*@
<script>
    // Function to toggle visibility of #offlineTaxDetails
    function toggleFields(isOffline) {
        const offlineTaxDetails = document.getElementById('offlineTaxDetails');

        // Show the section if "Yes" is selected; hide it otherwise
        if (isOffline) {
            offlineTaxDetails.style.display = 'block';
        } else {
            offlineTaxDetails.style.display = 'none';
        }
    }

    // Attach event listener on DOMContentLoaded for initialization
    document.addEventListener('DOMContentLoaded', () => {
        const yesRadio = document.getElementById('yes');
        const noRadio = document.getElementById('no');
        const offlineTaxDetails = document.getElementById('OFFLINE_TAX_PAYMENT'); // ✅ Correct ID

        function toggleFields(isOffline) {
            offlineTaxDetails.style.display = isOffline ? 'block' : 'none';
        }

        // ✅ Initialize visibility based on selected value
        toggleFields(yesRadio.checked);

        // ✅ Ensure change event works properly
        yesRadio.addEventListener('change', () => toggleFields(true));
        noRadio.addEventListener('change', () => toggleFields(false));
    });

</script>


@*JavaScript to Hide Elements*@
<script>
function hideElementsByClass(HideAtDept) {
    let elements = document.querySelectorAll("." + HideAtDept);
    elements.forEach(el => el.style.display = "none");
}

document.addEventListener("DOMContentLoaded", function () {
    @if (ViewBag.IsViewPage == true) // If condition is true, call the function
    {
        @:hideElementsByClass("HideAtDept");
    }
});
</script>


@*update document File Size*@
<script>
    function updateFileSize(docId) {
        const inputElement = document.getElementById(`file-${docId}`);
        const sizeElement = document.getElementById(`size-${docId}`);

        if (inputElement.files.length > 0) {
            // Get file size in bytes
            const fileSizeBytes = inputElement.files[0].size;

            // Convert to MB
            const fileSizeMB = (fileSizeBytes / (1024 * 1024)).toFixed(2);

            // Update size column
            sizeElement.textContent = `${fileSizeMB} MB`;

            // Validate file size (Max: 5 MB)
            if (fileSizeMB > 5) {
                alert("The selected file exceeds the maximum allowed size of 5 MB. Please select a smaller file.");
                inputElement.value = ""; // Clear input
                sizeElement.textContent = "0 MB"; // Reset size
            }
        } else {
            sizeElement.textContent = "0 MB";
        }
    }

    function showViewButton(docId, input) {
        if (input.files.length > 0) {
            let file = input.files[0];
            let fileURL = URL.createObjectURL(file);

            document.getElementById(`viewBtn-${docId}`).innerHTML =
                `<a href='${fileURL}' target='_blank' class='btn btn-primary btn-sm'>View</a>`;
        }
    }
</script>

@*Edit readonly-field *@
<script>
    function enableEditMode() {
        // Select all fields with the class "readonly-field" and remove the readonly attribute
        document.querySelectorAll(".readonly-field").forEach(field => {
            field.removeAttribute("readonly");
        });

        // Optionally focus on the first input field after enabling edit mode
        document.querySelector(".readonly-field")?.focus();
    }
</script>
@*rejectReason*@
<script>
    function setAction(actionType) {
        document.getElementById("actionType").value = actionType;

        if (actionType === "Reject") {
            var reason = document.getElementById("rejectReason").value.trim();
            if (reason === "") {
                alert("Please provide a reason for rejection.");
                return;
            }
            document.getElementById("rejectReasonInput").value = reason;
        } else {
            document.getElementById("rejectReasonInput").value = ""; // Clear reason if approved
        }

        setTimeout(() => {
            document.getElementById("TheaterForm").submit();
        }, 500);
    }
</script>

@*Keep fields readonly for update*@
<script>
     document.addEventListener("DOMContentLoaded", function () {
        let isViewPage = @Html.Raw(Json.Encode(isViewPage));

        if (isViewPage) {
            // Keep fields readonly in Approve/Reject mode
            document.querySelectorAll(".readonly-field").forEach(field => {
                field.readOnly = true;
            });
        } else {
            // Allow editing if not in Approve/Reject mode
            document.getElementById("updateBtn")?.addEventListener("click", function () {
                document.querySelectorAll(".readonly-field").forEach(field => {
                    field.removeAttribute("readonly");
                });
            });
        }
    });
</script>

@*rejectReasonInput*@
<script>
    function submitRejection() {
        var reason = document.getElementById("rejectReason").value;

        if (reason != "") {
            // Close the modal
            $('#rejectModal').modal('hide');

            // Set the action to "Reject" and submit the form
            document.getElementById("action").value = "Reject";
            document.getElementById("rejectReasonInput").value = reason;
            document.getElementById("TheaterForm").submit(); // Replace "yourFormId" with the actual ID of your form
        } else {
            alert("Please provide a reason for rejection.");
        }
    }
</script>

@*TO ADD/REMOVE REQUIRED *@
<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll("[required]").forEach(input => {
            let label = document.querySelector("label[for='" + input.id + "']");
            if (label && !label.innerHTML.includes("*")) {
                label.innerHTML += ' <span class="text-danger">*</span>';
            }
        });
    });
</script>




<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
