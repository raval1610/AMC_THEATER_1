@*@{
        ViewBag.Title = "Seprate_Theater_Tax";
    }

    <h2>Seprate_Theater_Tax</h2>*@

@model AMC_THEATER_1.Models.TaxPaymentViewModel
@{

    ViewBag.Title = "Seprate_Theater_Tax";
    ViewBag.ShowBasicNavbar = false;
    ViewBag.ShowNavbar = true;
    ViewBag.ShowSideBar = false;
    ViewBag.Login = true;
    ViewBag.ModuleTax = true;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theater Tax Payment</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .form-control, .form-select {
            border-radius: 0.25rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            margin-bottom: 0.5rem;
        }

        .container {
            max-width: 90%;
            padding: 0 15px;
            margin-left: 70px;
            transition: margin-left 0.3s;
            padding: 15px;
        }

        .card {
            padding: 20px;
        }

        .btn-payment {
            background-color: #28a745;
            color: white;
        }
    </style>

</head>
<body>
    <div class="col-xs-12 mt-3 ms-3">
        <div class="col-md-12 mt-3 ms-4">
            <div class="container ms-5">
                <div class="card shadow-sm ms-2">
                    <div class="card-header bg-light text-dark fw-bold text-center">
                        <h4 class="mb-0 fs-2">Make Payment</h4>
                    </div>

                    <!-- Form to fetch theater details -->
                    <form action="@Url.Action("Seprate_Theater_Tax", "Home")" method="post">
                        <div class="mb-4 ms-5">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex mt-4 align-items-center">
                                    <input type="text" id="theater_id" name="theater_id"
                                           class="form-control me-2 w-100 text-center"
                                           placeholder="Enter Theater ID"
                                           value="@Request.Form["theater_id"]" required> <!-- ✅ Retains input value -->

                                    <button type="submit" class="btn btn-secondary">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                                <div class="text-end">
                                    <a href="@Url.Action("SearchID", "Home")" id="forgotIdLink" class="btn pe-3 ps-3 mt-3 w-2me-5 btn-secondary">Search ID</a>
                                </div>
                            </div>
                        </div>
                    </form>





                    <div class="mb-4">
                        <h4 class="fw-bold text-center bg-light mt-3 p-3">Basic Information</h4>
                    </div>

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Error"]</div>
                    }

                    @if (Model != null)
                    {
                        <div class="owner-details ms-5" style="display: block;">
                            <div class="row g-3 align-items-center">
                                <div class="col-md-4">
                                    <label for="Theater_Id" class="form-label fw-bold">Theater Id</label>
                                    <input type="text" id="Theater_Id" name="owner_name" class="form-control w-100" value="@Model.TheaterId" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="Theater_Name" class="form-label fw-bold">Theater Name</label>
                                    <input type="text" id="Theater_Name" name="Theater_Name" class="form-control w-100" value="@Model.TheaterName" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="owner_name" class="form-label fw-bold">Owner Name</label>
                                    <input type="text" id="owner_name" name="owner_name" class="form-control w-100" value="@Model.OwnerName" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="mobile_no" class="form-label fw-bold">Mobile No</label>
                                    <input type="text" id="mobile_no" name="mobile_no" class="form-control w-100" value="@Model.MobileNo" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="address" class="form-label fw-bold">Address</label>
                                    <textarea id="address" name="address" class="form-control w-100" rows="1" readonly required>@Model.Address</textarea>
                                </div>
                                <div class="col-md-4 me-0">
                                    <label for="email" class="form-label fw-bold">Email</label>
                                    <input type="email" id="email" name="email" class="form-control" value="@Model.Email" readonly required>
                                </div>
                                <div class="row mt-5">
                                    <form action="@Url.Action("ProcessTaxPaymentSeprate", "Home")" method="post" enctype="multipart/form-data">
                                        <input type="hidden" name="TheaterId" value="@Model.TheaterId">

                                        <div class="row align-items-end">
                                            <div class="col-md-4">
                                                <label for="fromDate" class="form-label fw-bold">From Month</label>
                                                <input type="month" id="fromDate" name="FromMonth" class="form-control">
                                            </div>
                                            <div class="col-md-4">
                                                <label for="toDate" class="form-label ms-3 fw-bold">To Month</label>
                                                <input type="month" id="toDate" name="ToMonth" class="form-control ms-2">
                                            </div>
                                            <div class="col-md-4">
                                                <button type="button" class="btn btn-primary ms-5 w-75" id="generateBtn">Generate Table</button>
                                            </div>
                                        </div>




                                </div>
                            </div>

                            <table id="screenCapacityTable" class="table table-bordered text-center mt-3">
                                <thead class="table-light">
                                    <tr>

                                        <th class="col-1">Screen</th>
                                        <th class="col-1">Rate</th>
                                        <th class="col-1">Type</th>
                                        <th class="col-1">Shows</th>
                                        <th class="col-1">Canceled</th>
                                        <th class="col-1">Actual</th>
                                        <th class="col-1">Amount</th>
                                    </tr>
                                </thead>

                                <tbody id="tableBody">
                                    @{
                                        string lastMonthYear = "";
                                    }
                                    @for (int i = 0; i < Model.Screens.Count; i++)
                                    {
                                        string currentMonthYear = Model.Screens[i].MonthYear;

                                        if (currentMonthYear != lastMonthYear)
                                        {
                                            <tr class="table-white">
                                                @*<td colspan="7" class="fw-bold text-center">@currentMonthYear</td>*@
                                            </tr>
                                            lastMonthYear = currentMonthYear;
                                        }

                                        <tr>
                                            <td class="text-start">
                                                @Model.Screens[i].ScreenId
                                                <input type="hidden" name="Screens[@i].ScreenId" value="@Model.Screens[i].ScreenId" />
                                            </td>



                                            <td>
                                                <input type="text" class="form-control text-end screenPrice small-input"
                                                       name="Screens[@i].ScreenPrice"
                                                       value="@Model.Screens[i].ScreenPrice"
                                                       readonly />
                                            </td>

                                            <td data-type="@Model.Screens[i].ScreenType">
                                                <input type="hidden" name="Screens[@i].ScreenType" value="@Model.Screens[i].ScreenType" />
                                                @Model.Screens[i].ScreenType
                                            </td>



                                            <td>
                                                <input type="number" class="form-control text-end totalShow small-input"
                                                       name="Screens[@i].TotalShow"
                                                       data-index="@i"
                                                       oninput="calculateActualShow(@i)"
                                                       required />
                                            </td>

                                            <td>
                                                <input type="number" class="form-control text-end cancelShow small-input"
                                                       name="Screens[@i].CancelShow"
                                                       data-index="@i"
                                                       oninput="calculateActualShow(@i)"
                                                       required />
                                            </td>

                                            <td>
                                                <input type="number" class="form-control text-end actualShow small-input"
                                                       name="Screens[@i].ActualShow"
                                                       id="actualShow_@i"
                                                       value="0"
                                                       readonly />
                                            </td>

                                            <td>
                                                <input type="text" class="form-control text-end amount small-input"
                                                       name="Screens[@i].AmtPerScreen"
                                                       id="amtPerScreen_@i"
                                                       value="0" readonly />
                                            </td>
                                        </tr>
                                    }
                                </tbody>


                                <tfoot>
                                    <tr>
                                        <td colspan="5" class="text-danger">Calculate by Actual Shows × Rate = Amount</td>
                                        <td class="text-end fw-bold">Total Amount:</td>
                                        <td id="totalAmount" class="fw-bold text-end">₹0</td>
                                    </tr>
                                </tfoot>
                            </table>


                            <div class="mb-3">
                                <label for="file" class="form-label fw-bold">Upload Show Statement</label>
                                <input type="file" id="file" name="DocumentPath" class="form-control" accept=".jpg,.jpeg,.png,.pdf" required>
                            </div>

                            <div class="col-12 text-center">
                                <button type="submit" class="btn btn-success m-3 w-25">Submit Payment</button>
                            </div>







                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("generateBtn").addEventListener("click", generateTable);

            // Attach event listeners for dynamically updating calculations
            document.addEventListener("input", function (event) {
                let target = event.target;
                if (!target.classList.contains("totalShow") &&
                    !target.classList.contains("cancelShow") &&
                    !target.classList.contains("rate")) return;

                // Prevent negative values
                target.value = Math.max(0, target.value);

                let row = target.closest("tr");

                // Validate cancelShow (must not exceed totalShow)
                if (target.classList.contains("cancelShow")) {
                    validateCancelShows(row);
                }

                calculateActualShow(row);
                calculateAmount(row);
            });

            function validateCancelShows(row) {
                let totalShows = parseInt(row.querySelector(".totalShow")?.value) || 0;
                let cancelInput = row.querySelector(".cancelShow");
                let cancelShows = parseInt(cancelInput.value) || 0;

                let errorSpan = row.querySelector(".cancelError") || createErrorSpan(row);

                if (cancelShows > totalShows) {
                    errorSpan.innerText = "Canceled shows cannot be more than total shows!";
                    cancelInput.value = totalShows; // Reset to totalShows if exceeded
                } else {
                    errorSpan.innerText = ""; // Clear error if valid
                }
            }

            function createErrorSpan(row) {
                let errorSpan = document.createElement("span");
                errorSpan.className = "cancelError text-danger";
                row.querySelector(".cancelShow").insertAdjacentElement("afterend", errorSpan);
                return errorSpan;
            }

            document.addEventListener("change", function (event) {
                if (event.target.classList.contains("screenType")) {
                    let row = event.target.closest("tr");
                    calculateActualShow(row);
                }
            });
        });

        function generateTable() {
            let fromDate = document.getElementById("fromDate").value;
            let toDate = document.getElementById("toDate").value;

            if (!fromDate || !toDate) {
                alert("Please select both From Date and To Date.");
                return;
            }

            let from = new Date(fromDate + "-01T00:00:00");
            let to = new Date(toDate + "-01T00:00:00");

            if (from > to) {
                alert("From Date cannot be greater than To Date.");
                return;
            }

            let tableBody = document.getElementById("tableBody");
            let existingRows = Array.from(tableBody.querySelectorAll("tr"));
            let current = new Date(from);
            let months = [];

            while (current <= to) {
                let monthYear = current.toLocaleString("default", { month: "short" }) + " " + current.getFullYear();
                months.push(monthYear);
                current.setMonth(current.getMonth() + 1);
            }

            let existingMonths = new Set();
            existingRows.forEach(row => {
                let firstCell = row.querySelector("td");
                if (firstCell && firstCell.colSpan === 8) {
                    existingMonths.add(firstCell.innerText);
                }
            });

            existingRows.forEach(row => {
                let firstCell = row.querySelector("td");
                if (firstCell && firstCell.colSpan === 8 && firstCell.innerText === months[0]) {
                    row.remove();
                }
            });

            let firstMonthRow = document.createElement("tr");
            firstMonthRow.className = "table-secondary";
            let firstMonthCell = document.createElement("td");
            firstMonthCell.colSpan = "8";
            firstMonthCell.className = "fw-bold text-center";
            firstMonthCell.innerText = months[0];
            firstMonthRow.appendChild(firstMonthCell);
            tableBody.prepend(firstMonthRow);

            let firstRowUsed = false;

            months.forEach((month, monthIndex) => {
                if (!existingMonths.has(month) || monthIndex === 0) {
                    if (monthIndex > 0) {
                        let monthRow = document.createElement("tr");
                        monthRow.className = "table-secondary";
                        let monthCell = document.createElement("td");
                        monthCell.colSpan = "8";
                        monthCell.className = "fw-bold text-center";
                        monthCell.innerText = month;
                        monthRow.appendChild(monthCell);
                        tableBody.appendChild(monthRow);
                    }

                    let existingScreens = new Map();
                    existingRows.forEach(row => {
                        if (!row.querySelector("td") || row.querySelector("td").colSpan !== 8) {
                            let screenIdCell = row.querySelector("td:first-child");
                            if (screenIdCell) {
                                let screenId = screenIdCell.innerText.trim();
                                if (screenId) {
                                    existingScreens.set(screenId, row.cloneNode(true));
                                }
                            }
                        }
                    });

                    if (!firstRowUsed) {
                        firstRowUsed = true;
                    } else {
                        existingScreens.forEach((row, key) => {
                            let clonedRow = row.cloneNode(true);
                            let inputs = clonedRow.querySelectorAll("input, select");
                            inputs.forEach((input) => {
                                let name = input.getAttribute("name");
                                if (name) {
                                    let newName = name.replace(/Screens\[\d+\]/, `Screens[${monthIndex}]`);
                                    input.setAttribute("name", newName);
                                }

                                if (input.type === "number" || input.tagName === "SELECT") {
                                    input.value = "";
                                }

                                if (input.classList.contains("totalShow") || input.classList.contains("cancelShow") || input.classList.contains("rate")) {
                                    input.setAttribute("data-index", monthIndex);
                                    input.addEventListener("input", function () {
                                        calculateActualShow(clonedRow);
                                        calculateAmount(clonedRow); // Update amount dynamically
                                    });
                                }

                                if (input.classList.contains("screenType")) {
                                    input.addEventListener("change", function () {
                                        calculateActualShow(clonedRow);
                                    });
                                }
                            });

                            tableBody.appendChild(clonedRow);
                        });
                    }
                }
            });

            calculateTotalAmount();
        }

        function calculateActualShow(row) {
            let totalShows = parseInt(row.querySelector(".totalShow")?.value) || 0;
            let cancelShows = parseInt(row.querySelector(".cancelShow")?.value) || 0;
            let actualShow = Math.max(0, totalShows - cancelShows);
            let actualShowField = row.querySelector(".actualShow");

            if (actualShowField) {
                actualShowField.value = actualShow;
            }

            calculateAmount(row); // Update amount when actual show changes
        }

        function calculateAmount(row) {
            let actualShow = parseInt(row.querySelector(".actualShow")?.value) || 0;
            let rate = parseFloat(row.querySelector(".screenPrice")?.value) || 0;
            let amountField = row.querySelector(".amount");

            // Check if row is newly added, if so, set amount to 0
            if (row.dataset.newRow === "true") {
                amountField.value = "0.00";
                row.dataset.newRow = "false"; // Reset after first update
            } else {
                let amount = actualShow * rate;
                amountField.value = amount.toFixed(2);
            }

            calculateTotalAmount();
        }


        function calculateTotalAmount() {
            let totalAmount = 0;
            document.querySelectorAll(".amount").forEach(input => {
                totalAmount += parseFloat(input.value) || 0;
            });

            document.getElementById("totalAmount").innerText = `₹${totalAmount.toFixed(2)}`;
        }


    </script>
    <script>
           document.addEventListener("DOMContentLoaded", function () {
        let today = new Date();
        let year = today.getFullYear();
        let month = String(today.getMonth() + 1).padStart(2, '0'); // Ensures two-digit month

        let currentMonth = `${year}-${month}`;

        document.getElementById("fromDate").value = currentMonth;
        document.getElementById("toDate").value = currentMonth;

        // Generate table automatically with the default month
        generateTable();
    });

    </script>
</body>
</html>
