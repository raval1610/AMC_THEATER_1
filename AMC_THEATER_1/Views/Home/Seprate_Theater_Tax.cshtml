
@*@{
    ViewBag.Title = "Seprate_Theater_Tax";
}

<h2>Seprate_Theater_Tax</h2>*@

@model AMC_THEATER_1.Models.TaxPaymentViewModel
@{

    ViewBag.Title = "Seprate_Theater_Tax";
    ViewBag.ShowBasicNavbar = false;
    ViewBag.ShowNavbar = true;
    ViewBag.ShowSideBar = false;
    ViewBag.Login = true;
    ViewBag.ModuleTax = true;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theater Tax Payment</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .form-control, .form-select {
            border-radius: 0.25rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            margin-bottom: 0.5rem;
        }

        .container {
            max-width: 90%;
            padding: 0 15px;
            margin-left: 65px;
/**/            transition: margin-left 0.3s;
            padding: 15px;
        }

        .card {
            padding: 20px;
        }

        .btn-payment {
            background-color: #28a745;
            color: white;
        }
    </style>
</head>
<body>
    <div class="col-xs-12 mt-3 ms-3">
        <div class="col-md-12 mt-3 ms-4">
            <div class="container ms-5">
                <div class="card shadow-sm ms-2">
                    <div class="card-header bg-light text-dark fw-bold text-center">
                        <h4 class="mb-0 fs-2">Make Payment</h4>
                    </div>

                    <!-- Form to fetch theater details -->
                    <form action="@Url.Action("Seprate_Theater_Tax", "Home")" method="post">
                        <div class="mb-4 ms-5">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex mt-4 align-items-center">
                                    <input type="text" id="theater_id" name="theater_id"
                                           class="form-control me-2 w-100 text-center"
                                           placeholder="Enter Theater ID"
                                           value="@Request.Form["theater_id"]" required> <!-- ✅ Retains input value -->

                                    <button type="submit" class="btn btn-secondary">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                                <div class="text-end">
                                    <a href="javascript:void(0);" id="forgotIdLink" class="btn pe-3 ps-3 mt-4 w-2 me-5 btn-secondary" onclick="handleForgotIdClick()">Search ID</a>
                                </div>

                                <script>
                                    function handleForgotIdClick() {
                                        window.location.href = "SearchID"; // Replace with your desired URL
                                    }
                                </script>

                            </div>
                        </div>
                    </form>





                    <div class="mb-4">
                        <h4 class="fw-bold text-center bg-light mt-3 p-3">Basic Information</h4>
                    </div>

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Error"]</div>
                    }

                    @if (Model != null)
                    {
                        <div class="owner-details ms-5" style="display: block;">
                            <div class="row g-3 align-items-center">
                                <div class="col-md-4">
                                    <label for="owner_name" class="form-label fw-bold">Owner Name</label>
                                    <input type="text" id="owner_name" name="owner_name" class="form-control w-100" value="@Model.OwnerName" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="mobile_no" class="form-label fw-bold">Mobile No</label>
                                    <input type="text" id="mobile_no" name="mobile_no" class="form-control w-100" value="@Model.MobileNo" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="address" class="form-label fw-bold">Address</label>
                                    <textarea id="address" name="address" class="form-control w-100" rows="1" readonly required>@Model.Address</textarea>
                                </div>

                                <div class="row mt-5">
                                    <div class="col-md-4 me-0">
                                        <label for="email" class="form-label fw-bold">Email</label>
                                        <input type="email" id="email" name="email" class="form-control" value="@Model.Email" readonly required>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-4">
                                            <label for="fromDate" class="form-label fw-bold">From Date</label>
                                            <input type="month" id="fromDate" class="form-control">
                                        </div>
                                        <div class="col-md-4">
                                            <label for="toDate" class="form-label fw-bold">To Date</label>
                                            <input type="month" id="toDate" class="form-control">
                                        </div>
                                    </div>

                                    <button type="button" class="btn btn-primary mt-3" id="generateBtn">Generate Table</button>


                                </div>
                            </div>


                            <table id="screenCapacityTable" class="table table-bordered text-center mt-3">
                                <thead class="table-light">
                                    <tr>
                                        <th>Month & Year</th>
                                        <th>Screen No</th>
                                        <th>Rate</th>
                                        <th>Screen Type</th>
                                        <th>Total Shows</th>
                                        <th>Canceled Shows</th>
                                        <th>Actual Shows</th>
                                        <th>Amount</th>
                                    </tr>
                                </thead>
                                <tbody id="tableBody">
                                <tbody id="tableBody">
                                    @for (int i = 0; i < Model.Screens.Count; i++)
                                    {
                                        <tr>
                                            <!-- Month & Year Column (Displayed for the first screen only per month) -->
                                            @if (i == 0)
                                            {
                                                <td rowspan="@Model.Screens.Count" class="fw-bold">
                                                    @Model.MonthYear <!-- This should be dynamically generated -->
                                                </td>
                                            }

                                            <td>@Model.Screens[i].SEQUENTIAL_SCREEN_NO</td>

                                            <!-- Hidden Field to Ensure ScreenId is Passed -->
                                            <input type="hidden" name="Screens[@i].ScreenId" value="@Model.Screens[i].ScreenId" />

                                            <td>
                                                <input type="text" class="form-control screenPrice"
                                                       name="Screens[@i].ScreenPrice"
                                                       value="@Model.Screens[i].ScreenPrice" readonly />
                                            </td>

                                            <td>@Model.Screens[i].ScreenType</td>

                                            <td>
                                                <input type="number" class="form-control totalShow"
                                                       name="Screens[@i].TotalShow"
                                                       data-index="@i"
                                                       oninput="calculateActualShow(@i)" required />
                                            </td>

                                            <td>
                                                <input type="number" class="form-control cancelShow"
                                                       name="Screens[@i].CancelShow"
                                                       data-index="@i"
                                                       oninput="calculateActualShow(@i)" required />
                                            </td>

                                            <td>
                                                <input type="number" class="form-control actualShow"
                                                       name="Screens[@i].ActualShow"
                                                       id="actualShow_@i"
                                                       value="0" readonly />
                                            </td>

                                            <td>
                                                <input type="text" class="form-control amount"
                                                       name="Screens[@i].AmtPerScreen"
                                                       id="amtPerScreen_@i"
                                                       value="0" readonly />
                                            </td>
                                        </tr>
                                    }
                                </tbody>

                                <tfoot>
                                    <tr>
                                        <td colspan="6" class="text-danger">Calculate by Actual Shows × Rate = Amount</td>
                                        <td class="text-end fw-bold">Total Amount:</td>
                                        <td id="totalAmount" class="fw-bold text-end">₹0</td>
                                    </tr>
                                </tfoot>
                            </table>

                            <div class="mb-3">
                                <label for="file" class="form-label fw-bold">Upload Show Statement</label>
                                <input type="file" id="file" name="DocumentPath" class="form-control" accept=".jpg,.jpeg,.png,.pdf" required>
                            </div>

                            <div class="col-12 text-center">
                                <button type="submit" class="btn btn-success m-3 w-25">Submit Payment</button>
                            </div>








                        </div>

                    }

                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
            <script>
                document.getElementById("generateBtn").addEventListener("click", function () {
                    generateTable();
                });

                function generateTable() {
                    let fromDate = document.getElementById("fromDate").value;
                    let toDate = document.getElementById("toDate").value;

                    if (!fromDate || !toDate) {
                        alert("Please select both From Date and To Date.");
                        return;
                    }

                    let from = new Date(fromDate + "-01");
                    let to = new Date(toDate + "-01");

                    if (from > to) {
                        alert("From Date cannot be greater than To Date.");
                        return;
                    }

                    let tableBody = document.getElementById("tableBody");
                    tableBody.innerHTML = ""; // Clear previous data

                    let current = new Date(from);
                    let months = [];

                    // Generate months array
                    while (current <= to) {
                        let monthYear = current.toLocaleString('default', { month: 'short' }) + " " + current.getFullYear();
                        months.push(monthYear);
                        current.setMonth(current.getMonth() + 1);
                    }

                    // Now dynamically generate rows based on months and screen info
                    months.forEach((month, monthIndex) => {
                        let screenCount = 2; // You can adjust this count or fetch it dynamically from form inputs
                        for (let screenIndex = 0; screenIndex < screenCount; screenIndex++) {
                            let row = document.createElement("tr");

                            // Add month cell for first screen of each month
                            if (screenIndex === 0) {
                                let monthCell = document.createElement("td");
                                monthCell.setAttribute("rowspan", screenCount);
                                monthCell.className = "fw-bold align-middle";
                                monthCell.innerText = month;
                                row.appendChild(monthCell);
                            }

                            // Screen Number
                            let screenNoCell = document.createElement("td");
                            screenNoCell.innerText = screenIndex + 1; // Dynamic screen number
                            row.appendChild(screenNoCell);

                            // Screen Price (input field)
                            let rateCell = document.createElement("td");
                            rateCell.innerHTML = `<input type="text" class="form-control screenPrice" name="Screens[${monthIndex}][${screenIndex}].ScreenPrice" value="" required />`;
                            row.appendChild(rateCell);

                            // Screen Type (input field)
                            let screenTypeCell = document.createElement("td");
                            screenTypeCell.innerHTML = `<input type="text" class="form-control screenType" name="Screens[${monthIndex}][${screenIndex}].ScreenType" value="" required />`;
                            row.appendChild(screenTypeCell);

                            // Total Show
                            let totalShowCell = document.createElement("td");
                            totalShowCell.innerHTML = `<input type="number" class="form-control totalShow" name="Screens[${monthIndex}][${screenIndex}].TotalShow" data-index="${monthIndex}-${screenIndex}" required />`;
                            row.appendChild(totalShowCell);

                            // Cancel Show
                            let cancelShowCell = document.createElement("td");
                            cancelShowCell.innerHTML = `<input type="number" class="form-control cancelShow" name="Screens[${monthIndex}][${screenIndex}].CancelShow" data-index="${monthIndex}-${screenIndex}" required />`;
                            row.appendChild(cancelShowCell);

                            // Actual Show (readonly)
                            let actualShowCell = document.createElement("td");
                            actualShowCell.innerHTML = `<input type="number" class="form-control actualShow" name="Screens[${monthIndex}][${screenIndex}].ActualShow" readonly />`;
                            row.appendChild(actualShowCell);

                            // Amount per Screen (readonly)
                            let amountCell = document.createElement("td");
                            amountCell.innerHTML = `<input type="text" class="form-control amount" name="Screens[${monthIndex}][${screenIndex}].AmtPerScreen" readonly />`;
                            row.appendChild(amountCell);

                            tableBody.appendChild(row);
                        }
                    });
                }
            </script>

            @*<script>
                    document.getElementById("generateBtn").addEventListener("click", function () {
                        generateTable();
                    });

                    function generateTable() {
                        let fromDate = document.getElementById("fromDate").value;
                        let toDate = document.getElementById("toDate").value;

                        if (!fromDate || !toDate) {
                            alert("Please select both From Date and To Date.");
                            return;
                        }

                        let from = new Date(fromDate + "-01");
                        let to = new Date(toDate + "-01");

                        if (from > to) {
                            alert("From Date cannot be greater than To Date.");
                            return;
                        }

                        let tableBody = document.getElementById("tableBody");
                        tableBody.innerHTML = ""; // Clear previous data

                        let current = new Date(from);
                        let months = [];

                        while (current <= to) {
                            let monthYear = current.toLocaleString('default', { month: 'short' }) + " " + current.getFullYear();
                            months.push(monthYear);
                            current.setMonth(current.getMonth() + 1);
                        }

                        let screens = [
                            { SEQUENTIAL_SCREEN_NO: 1, ScreenPrice: 500, ScreenType: "2D" },
                            { SEQUENTIAL_SCREEN_NO: 2, ScreenPrice: 700, ScreenType: "3D" }
                        ];

                        months.forEach((month, monthIndex) => {
                            screens.forEach((screen, screenIndex) => {
                                let row = document.createElement("tr");

                                if (screenIndex === 0) {
                                    let monthCell = document.createElement("td");
                                    monthCell.setAttribute("rowspan", screens.length);
                                    monthCell.className = "fw-bold align-middle";
                                    monthCell.innerText = month;
                                    row.appendChild(monthCell);
                                }

                                let screenNoCell = document.createElement("td");
                                screenNoCell.innerText = screen.SEQUENTIAL_SCREEN_NO;
                                row.appendChild(screenNoCell);

                                let rateCell = document.createElement("td");
                                rateCell.innerHTML = `<input type="text" class="form-control screenPrice" name="Screens[${monthIndex}][${screenIndex}].ScreenPrice" value="${screen.ScreenPrice}" readonly />`;
                                row.appendChild(rateCell);

                                let screenTypeCell = document.createElement("td");
                                screenTypeCell.innerText = screen.ScreenType;
                                row.appendChild(screenTypeCell);

                                let totalShowCell = document.createElement("td");
                                totalShowCell.innerHTML = `<input type="number" class="form-control totalShow" name="Screens[${monthIndex}][${screenIndex}].TotalShow" data-index="${monthIndex}-${screenIndex}" oninput="calculateActualShow(this)" required />`;
                                row.appendChild(totalShowCell);

                                let cancelShowCell = document.createElement("td");
                                cancelShowCell.innerHTML = `<input type="number" class="form-control cancelShow" name="Screens[${monthIndex}][${screenIndex}].CancelShow" data-index="${monthIndex}-${screenIndex}" oninput="calculateActualShow(this)" required />`;
                                row.appendChild(cancelShowCell);

                                let actualShowCell = document.createElement("td");
                                actualShowCell.innerHTML = `<input type="number" class="form-control actualShow" name="Screens[${monthIndex}][${screenIndex}].ActualShow" readonly />`;
                                row.appendChild(actualShowCell);

                                let amountCell = document.createElement("td");
                                amountCell.innerHTML = `<input type="text" class="form-control amount" name="Screens[${monthIndex}][${screenIndex}].AmtPerScreen" readonly />`;
                                row.appendChild(amountCell);

                                tableBody.appendChild(row);
                            });
                        });
                    }

                    function calculateActualShow(input) {
                        let index = input.getAttribute("data-index");
                        let row = input.closest("tr");

                        let totalShow = parseInt(row.querySelector(".totalShow").value) || 0;
                        let cancelShow = parseInt(row.querySelector(".cancelShow").value) || 0;
                        let actualShowInput = row.querySelector(".actualShow");
                        let amountInput = row.querySelector(".amount");

                        let rate = parseFloat(row.querySelector(".screenPrice").value) || 0;

                        let actualShow = Math.max(totalShow - cancelShow, 0);
                        actualShowInput.value = actualShow;

                        let amount = actualShow * rate;
                        amountInput.value = amount.toFixed(2);

                        calculateTotalAmount();
                    }

                    function calculateTotalAmount() {
                        let totalAmount = 0;
                        document.querySelectorAll(".amount").forEach(input => {
                            totalAmount += parseFloat(input.value) || 0;
                        });
                        document.getElementById("totalAmount").innerText = `₹${totalAmount.toFixed(2)}`;
                    }
                </script>*@


</body>
</html>
