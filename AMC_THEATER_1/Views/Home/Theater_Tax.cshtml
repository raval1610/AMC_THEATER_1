@model AMC_THEATER_1.Models.TaxPaymentViewModel
@{
    Layout = "~/Views/Shared/_HomeSideBar.cshtml";

    ViewBag.Title = "Theater Tax Payment";
    ViewBag.ShowBasicNavbar = false;
    ViewBag.ShowNavbar = true;
    ViewBag.ShowSideBar = true;
    ViewBag.Login = false;
    ViewBag.ModuleTax = true;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theater Tax Payment</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .form-control, .form-select {
            border-radius: 0.25rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            margin-bottom: 0.5rem;
        }

        .container {
            max-width: 90%;
            padding: 0 15px;
            margin-left: 185px;
            transition: margin-left 0.3s;
            padding: 15px;
        }

        .card {
            padding: 20px;
        }

        .btn-payment {
            background-color: #28a745;
            color: white;
        }

   
     
        }
    </style>

</head>
<body>
    <div class="col-xs-12 mt-3 ms-3">
        <div class="col-md-12 mt-3 ms-4">
            <div class="container ms-5">
                <div class="card shadow-sm ms-2">
                    <div class="card-header bg-light text-dark fw-bold text-center">
                        <h4 class="mb-0 fs-2">Make Payment</h4>
                    </div>

                    <!-- Form to fetch theater details -->
                    <form action="@Url.Action("Theater_Tax", "Home")" method="post">
                        <div class="mb-4 ms-5">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex mt-4 align-items-center">
                                    <input type="text" id="theater_id" name="theater_id"
                                           class="form-control me-2 w-100 text-center"
                                           placeholder="Enter Theater ID"
                                           value="@Request.Form["theater_id"]" required> <!-- ✅ Retains input value -->

                                    <button type="submit" class="btn btn-secondary">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                                <div class="text-end">
                                    <a href="javascript:void(0);" id="forgotIdLink" class="btn pe-3 ps-3 mt-3 w-2me-5 btn-secondary" onclick="handleForgotIdClick()">Search ID</a>
                                </div>
                            </div>
                        </div>
                    </form>





                    <div class="mb-4">
                        <h4 class="fw-bold text-center bg-light mt-3 p-3">Basic Information</h4>
                    </div>

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Error"]</div>
                    }

                    @if (Model != null)
                    {
                        <div class="owner-details ms-5" style="display: block;">
                            <div class="row g-3 align-items-center">
                                <div class="col-md-4">
                                    <label for="Theater_Id" class="form-label fw-bold">Theater Id</label>
                                    <input type="text" id="Theater_Id" name="owner_name" class="form-control w-100" value="@Model.TheaterId" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="Theater_Name" class="form-label fw-bold">Theater Name</label>
                                    <input type="text" id="Theater_Name" name="Theater_Name" class="form-control w-100" value="@Model.TheaterName" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="owner_name" class="form-label fw-bold">Owner Name</label>
                                    <input type="text" id="owner_name" name="owner_name" class="form-control w-100" value="@Model.OwnerName" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="mobile_no" class="form-label fw-bold">Mobile No</label>
                                    <input type="text" id="mobile_no" name="mobile_no" class="form-control w-100" value="@Model.MobileNo" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="address" class="form-label fw-bold">Address</label>
                                    <textarea id="address" name="address" class="form-control w-100" rows="1" readonly required>@Model.Address</textarea>
                                </div>
                                <div class="col-md-4 me-0">
                                    <label for="email" class="form-label fw-bold">Email</label>
                                    <input type="email" id="email" name="email" class="form-control" value="@Model.Email" readonly required>
                                </div>
                                <div class="row mt-5">


                                    <div class="row align-items-end">
                                        <div class="col-md-4">
                                            <label for="fromDate" class="form-label fw-bold">From Month</label>
                                            <input type="month" id="fromDate" class="form-control">
                                        </div>
                                        <div class="col-md-4">
                                            <label for="toDate" class="form-label ms-3 fw-bold">To Month</label>
                                            <input type="month" id="toDate" class="form-control ms-2">
                                        </div>
                                        <div class="col-md-4">
                                            <button type="button" class="btn btn-primary ms-5 w-75" id="generateBtn">Generate Table</button>
                                        </div>
                                    </div>



                                </div>
                            </div>

                            <table id="screenCapacityTable" class="table table-bordered text-center mt-3">
                                <thead class="table-light">
                                    <tr>

                                        <th class="col-1">Screen</th>
                                        <th class="col-1">Rate</th>
                                        <th class="col-1">Type</th>
                                        <th class="col-1">Shows</th>
                                        <th class="col-1">Canceled</th>
                                        <th class="col-1">Actual</th>
                                        <th class="col-1">Amount</th>
                                    </tr>
                                </thead>

                                <tbody id="tableBody">
                                    @{
                                        string lastMonthYear = "";
                                    }
                                    @for (int i = 0; i < Model.Screens.Count; i++)
                                    {
                                        string currentMonthYear = Model.Screens[i].MonthYear;

                                        // Add a separate row for each new month
                                        if (currentMonthYear != lastMonthYear)
                                        {
                                            <tr class="table-white">
                                                <td colspan="2" class="fw-bold text-center">@currentMonthYear</td>
                                            </tr>
                                            lastMonthYear = currentMonthYear;
                                        }

                                        <tr>
                                            <td class="text-start">@Model.Screens[i].ScreenId</td>

                                            <!-- Hidden Field to Ensure ScreenId is Passed -->
                                            <input type="hidden" name="Screens[@i].ScreenId" value="@Model.Screens[i].ScreenId" />

                                            <td>
                                                <input type="text" class="form-control text-end screenPrice small-input"
                                                       name="Screens[@i].ScreenPrice"
                                                       value="@Model.Screens[i].ScreenPrice"
                                                       readonly />
                                            </td>

                                            <td>@Model.Screens[i].ScreenType</td>
                                            <td>
                                                <input type="number" class="form-control text-end totalShow small-input"
                                                       name="Screens[@i].TotalShow"
                                                       data-index="@i"
                                                       oninput="calculateActualShow(@i)"
                                                       required />
                                            </td>

                                            <td>
                                                <input type="number" class="form-control text-end cancelShow small-input"
                                                       name="Screens[@i].CancelShow"
                                                       data-index="@i"
                                                       oninput="calculateActualShow(@i)"
                                                       required />
                                            </td>

                                            <td>
                                                <input type="number" class="form-control text-end actualShow small-input"
                                                       name="Screens[@i].ActualShow"
                                                       id="actualShow_@i"
                                                       value="0"
                                                       readonly />
                                            </td>

                                            <td>
                                                <input type="text" class="form-control text-end amount small-input"
                                                       name="Screens[@i].AmtPerScreen"
                                                       id="amtPerScreen_@i"
                                                       value="0" readonly />
                                            </td>
                                        </tr>
                                    }
                                </tbody>

                                <tfoot>
                                    <tr>
                                        <td colspan="5" class="text-danger">Calculate by Actual Shows × Rate = Amount</td>
                                        <td class="text-end fw-bold">Total Amount:</td>
                                        <td id="totalAmount" class="fw-bold text-end">₹0</td>
                                    </tr>
                                </tfoot>
                            </table>


                            <div class="mb-3">
                                <label for="file" class="form-label fw-bold">Upload Show Statement</label>
                                <input type="file" id="file" name="DocumentPath" class="form-control" accept=".jpg,.jpeg,.png,.pdf" required>
                            </div>

                            <div class="col-12 text-center">
                                <button type="submit" class="btn btn-success m-3 w-25">Submit Payment</button>
                            </div>








                        </div>

                    }

                </div>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        
            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    document.getElementById("generateBtn").addEventListener("click", generateTable);
                });

                function generateTable() {
                    let fromDate = document.getElementById("fromDate").value;
                    let toDate = document.getElementById("toDate").value;

                    if (!fromDate || !toDate) {
                        alert("Please select both From Date and To Date.");
                        return;
                    }

                    let from = new Date(fromDate + "-01T00:00:00");
                    let to = new Date(toDate + "-01T00:00:00");

                    if (from > to) {
                        alert("From Date cannot be greater than To Date.");
                        return;
                    }

                    let tableBody = document.getElementById("tableBody");
                    let existingRows = Array.from(tableBody.querySelectorAll("tr"));

                    let current = new Date(from);
                    let months = [];

                    while (current <= to) {
                        let monthYear = current.toLocaleString("default", { month: "short" }) + " " + current.getFullYear();
                        months.push(monthYear);
                        current.setMonth(current.getMonth() + 1);
                    }

                    let existingMonths = new Set();
                    existingRows.forEach(row => {
                        let firstCell = row.querySelector("td");
                        if (firstCell && firstCell.colSpan === 8) {
                            existingMonths.add(firstCell.innerText);
                        }
                    });

                    months.forEach((month, monthIndex) => {
                        if (!existingMonths.has(month)) {
                            let monthRow = document.createElement("tr");
                            monthRow.className = "table-secondary";
                            let monthCell = document.createElement("td");
                            monthCell.colSpan = "8";
                            monthCell.className = "fw-bold text-center";
                            monthCell.innerText = month;
                            monthRow.appendChild(monthCell);
                            tableBody.appendChild(monthRow);

                            let existingScreens = new Map();
                            existingRows.forEach(row => {
                                if (!row.querySelector("td") || row.querySelector("td").colSpan !== 8) {
                                    let screenIdCell = row.querySelector("td:first-child");
                                    if (screenIdCell) {
                                        let screenId = screenIdCell.innerText.trim();
                                        if (screenId) {
                                            existingScreens.set(screenId, row.cloneNode(true));
                                        }
                                    }
                                }
                            });

                            existingScreens.forEach((row) => {
                                let clonedRow = row.cloneNode(true);
                                let inputs = clonedRow.querySelectorAll("input");
                                inputs.forEach((input) => {
                                    let name = input.getAttribute("name");
                                    if (name) {
                                        let newName = name.replace(/Screens\[\d+\]/, `Screens[${monthIndex}]`);
                                        input.setAttribute("name", newName);
                                    }
                                    if (input.value.trim() === "0") {
                                        input.value = "";
                                    }
                                });
                                tableBody.appendChild(clonedRow);
                            });
                        }
                    });
                }

                //document.addEventListener("DOMContentLoaded", function () {
                //    document.getElementById("generateBtn").addEventListener("click", generateTable);
                //});

                //function generateTable() {
                //    let fromDate = document.getElementById("fromDate").value;
                //    let toDate = document.getElementById("toDate").value;

                //    if (!fromDate || !toDate) {
                //        alert("Please select both From Date and To Date.");
                //        return;
                //    }

                //    let from = new Date(fromDate + "-01T00:00:00");
                //    let to = new Date(toDate + "-01T00:00:00");

                //    if (from > to) {
                //        alert("From Date cannot be greater than To Date.");
                //        return;
                //    }

                //    let tableBody = document.getElementById("tableBody");
                //    let existingRows = Array.from(tableBody.querySelectorAll("tr"));

                //    let current = new Date(from);
                //    let months = [];

                //    while (current <= to) {
                //        let monthYear = current.toLocaleString("default", { month: "short" }) + " " + current.getFullYear();
                //        months.push(monthYear);
                //        current.setMonth(current.getMonth() + 1);
                //    }

                //    let existingMonths = new Set();
                //    existingRows.forEach(row => {
                //        let firstCell = row.querySelector("td");
                //        if (firstCell && firstCell.colSpan === 8) {
                //            existingMonths.add(firstCell.innerText);
                //        }
                //    });

                //    // Remove months that are out of range
                //    existingRows.forEach(row => {
                //        let firstCell = row.querySelector("td");
                //        if (firstCell && firstCell.colSpan === 8 && !months.includes(firstCell.innerText)) {
                //            row.remove();
                //        }
                //    });

                //    // Append only new months
                //    months.forEach((month, monthIndex) => {
                //        if (!existingMonths.has(month)) {
                //            let monthRow = document.createElement("tr");
                //            monthRow.className = "table-secondary";
                //            let monthCell = document.createElement("td");
                //            monthCell.colSpan = "8";
                //            monthCell.className = "fw-bold text-center";
                //            monthCell.innerText = month;
                //            monthRow.appendChild(monthCell);
                //            tableBody.appendChild(monthRow);

                //            existingRows.forEach((row) => {
                //                if (!row.querySelector("td") || row.querySelector("td").colSpan !== 8) {
                //                    let clonedRow = row.cloneNode(true);
                //                    let inputs = clonedRow.querySelectorAll("input");

                //                    inputs.forEach((input) => {
                //                        let name = input.getAttribute("name");
                //                        if (name) {
                //                            let newName = name.replace(/Screens\[\d+\]/, `Screens[${monthIndex}]`);
                //                            input.setAttribute("name", newName);
                //                        }
                //                        if (input.value.trim() === "0") {
                //                            input.value = "";
                //                        }
                //                    });
                //                    tableBody.appendChild(clonedRow);
                //                }
                //            });
                //        }
                //    });
                //}
                //document.addEventListener("DOMContentLoaded", function () {
                //    document.getElementById("generateBtn").addEventListener("click", generateTable);
                //});

                //function generateTable() {
                //    let fromDate = document.getElementById("fromDate").value;
                //    let toDate = document.getElementById("toDate").value;

                //    if (!fromDate || !toDate) {
                //        alert("Please select both From Date and To Date.");
                //        return;
                //    }

                //    let from = new Date(fromDate + "-01T00:00:00");
                //    let to = new Date(toDate + "-01T00:00:00");

                //    if (from > to) {
                //        alert("From Date cannot be greater than To Date.");
                //        return;
                //    }

                //    let tableBody = document.getElementById("tableBody");
                //    let originalRows = Array.from(tableBody.querySelectorAll("tr")); // Store original rows
                //    tableBody.innerHTML = ""; // Clear table

                //    let current = new Date(from);
                //    let months = [];

                //    while (current <= to) {
                //        let monthYear = current.toLocaleString("default", { month: "short" }) + " " + current.getFullYear();
                //        months.push(monthYear);
                //        current.setMonth(current.getMonth() + 1);
                //    }

                //    months.forEach((month, monthIndex) => {
                //        let monthRow = document.createElement("tr");
                //        monthRow.className = "table-secondary";
                //        let monthCell = document.createElement("td");
                //        monthCell.colSpan = "8";
                //        monthCell.className = "fw-bold text-center";
                //        monthCell.innerText = month;
                //        monthRow.appendChild(monthCell);
                //        tableBody.appendChild(monthRow);

                //        originalRows.forEach((row) => {
                //            let clonedRow = row.cloneNode(true);
                //            let inputs = clonedRow.querySelectorAll("input");

                //            inputs.forEach((input) => {
                //                let name = input.getAttribute("name");
                //                if (name) {
                //                    let newName = name.replace(/Screens\[\d+\]/, `Screens[${monthIndex}]`);
                //                    input.setAttribute("name", newName);
                //                }
                //                if (input.value.trim() === "0") {
                //                    input.value = ""; // Ensure 0 is not auto-filled
                //                }
                //            });

                //            tableBody.appendChild(clonedRow);
                //        });
                //    });
                //}
            

                //document.addEventListener("DOMContentLoaded", function () {
                //    document.getElementById("generateBtn").addEventListener("click", generateTable);
                //});

                //function generateTable() {
                //    let fromDate = document.getElementById("fromDate").value;
                //    let toDate = document.getElementById("toDate").value;

                //    if (!fromDate || !toDate) {
                //        alert("Please select both From Date and To Date.");
                //        return;
                //    }

                //    let from = new Date(fromDate + "-01T00:00:00");
                //    let to = new Date(toDate + "-01T00:00:00");

                //    if (from > to) {
                //        alert("From Date cannot be greater than To Date.");
                //        return;
                //    }

                //    let tableBody = document.getElementById("tableBody");
                //    let originalRows = Array.from(tableBody.querySelectorAll("tr")); // Store original rows
                //    tableBody.innerHTML = ""; // Clear table

                //    let current = new Date(from);
                //    let months = [];

                //    while (current <= to) {
                //        let monthYear = current.toLocaleString("default", { month: "short" }) + " " + current.getFullYear();
                //        months.push(monthYear);
                //        current.setMonth(current.getMonth() + 1);
                //    }

                //    months.forEach((month, monthIndex) => {
                //        let firstRowForMonth = true;

                //        originalRows.forEach((row) => {
                //            let clonedRow = row.cloneNode(true);
                //            let inputs = clonedRow.querySelectorAll("input");

                //            // ✅ Remove the "0" from the Screen column
                //            let screenCell = clonedRow.children[0];
                //            if (screenCell && screenCell.innerText.trim() === "0") {
                //                screenCell.innerText = "";
                //            }

                //            // ✅ Move Rate column inside Screen column
                //            let rateCell = clonedRow.children[1];
                //            if (screenCell && rateCell) {
                //                screenCell.innerHTML += `<br><span class="text-muted">${rateCell.innerText}</span>`; // Merge rate into screen column
                //                rateCell.remove(); // Remove the separate Rate column
                //            }

                //            inputs.forEach((input) => {
                //                let name = input.getAttribute("name");
                //                if (name) {
                //                    let newName = name.replace(/Screens\[\d+\]/, `Screens[${monthIndex}]`);
                //                    input.setAttribute("name", newName);
                //                }
                //                if (input.value.trim() === "0") {
                //                    input.value = ""; // Ensure 0 is not auto-filled
                //                }
                //            });

                //            // ✅ Insert Month column for every row (no rowspan)
                //            let monthCell = document.createElement("td");
                //            monthCell.className = "fw-bold align-middle";
                //            monthCell.innerText = month;
                //            clonedRow.insertBefore(monthCell, clonedRow.children[0]); // Insert month at first column

                //            tableBody.appendChild(clonedRow);
                //        });
                //    });
                //}

                function calculateActualShow(input) {
                    let index = input.getAttribute("data-index");
                    let row = input.closest("tr");

                    let totalShow = parseInt(row.querySelector(".totalShow").value) || 0;
                    let cancelShow = parseInt(row.querySelector(".cancelShow").value) || 0;
                    let actualShowInput = row.querySelector(".actualShow");
                    let amountInput = row.querySelector(".amount");

                    let rate = parseFloat(row.querySelector(".screenPrice").value) || 0;

                    let actualShow = Math.max(totalShow - cancelShow, 0);
                    actualShowInput.value = actualShow;

                    let amount = actualShow * rate;
                    amountInput.value = amount.toFixed(2);

                    calculateTotalAmount();
                }

                function calculateTotalAmount() {
                    let totalAmount = 0;
                    document.querySelectorAll(".amount").forEach(input => {
                        totalAmount += parseFloat(input.value) || 0;
                    });
                    document.getElementById("totalAmount").innerText = `₹${totalAmount.toFixed(2)}`;
                }
            </script>
            @*<script>
            document.getElementById("generateBtn").addEventListener("click", function () {
                generateTable();
            });

            function generateTable() {
                let fromDate = document.getElementById("fromDate").value;
                let toDate = document.getElementById("toDate").value;

                if (!fromDate || !toDate) {
                    alert("Please select both From Date and To Date.");
                    return;
                }

                let from = new Date(fromDate + "-01");
                let to = new Date(toDate + "-01");

                if (from > to) {
                    alert("From Date cannot be greater than To Date.");
                    return;
                }

                let tableBody = document.getElementById("tableBody");
                tableBody.innerHTML = ""; // Clear previous data

                let current = new Date(from);
                let months = [];

                // Generate months array
                while (current <= to) {
                    let monthYear = current.toLocaleString('default', { month: 'short' }) + " " + current.getFullYear();
                    months.push(monthYear);
                    current.setMonth(current.getMonth() + 1);
                }

                // Now dynamically generate rows based on months and screen info
                months.forEach((month, monthIndex) => {
                    let screenCount = 2; // You can adjust this count or fetch it dynamically from form inputs
                    for (let screenIndex = 0; screenIndex < screenCount; screenIndex++) {
                        let row = document.createElement("tr");

                        // Add month cell for first screen of each month
                        if (screenIndex === 0) {
                            let monthCell = document.createElement("td");
                            monthCell.setAttribute("rowspan", screenCount);
                            monthCell.className = "fw-bold align-middle";
                            monthCell.innerText = month;
                            row.appendChild(monthCell);
                        }

                        // Screen Number
                        let screenNoCell = document.createElement("td");
                        screenNoCell.innerText = screenIndex + 1; // Dynamic screen number
                        row.appendChild(screenNoCell);

                        // Screen Price (input field)
                        let rateCell = document.createElement("td");
                        rateCell.innerHTML = `<input type="text" class="form-control screenPrice" name="Screens[${monthIndex}][${screenIndex}].ScreenPrice" value="" required />`;
                        row.appendChild(rateCell);

                        // Screen Type (input field)
                        let screenTypeCell = document.createElement("td");
                        screenTypeCell.innerHTML = `<input type="text" class="form-control screenType" name="Screens[${monthIndex}][${screenIndex}].ScreenType" value="" required />`;
                        row.appendChild(screenTypeCell);

                        // Total Show
                        let totalShowCell = document.createElement("td");
                        totalShowCell.innerHTML = `<input type="number" class="form-control totalShow" name="Screens[${monthIndex}][${screenIndex}].TotalShow" data-index="${monthIndex}-${screenIndex}" required />`;
                        row.appendChild(totalShowCell);

                        // Cancel Show
                        let cancelShowCell = document.createElement("td");
                        cancelShowCell.innerHTML = `<input type="number" class="form-control cancelShow" name="Screens[${monthIndex}][${screenIndex}].CancelShow" data-index="${monthIndex}-${screenIndex}" required />`;
                        row.appendChild(cancelShowCell);

                        // Actual Show (readonly)
                        let actualShowCell = document.createElement("td");
                        actualShowCell.innerHTML = `<input type="number" class="form-control actualShow" name="Screens[${monthIndex}][${screenIndex}].ActualShow" readonly />`;
                        row.appendChild(actualShowCell);

                        // Amount per Screen (readonly)
                        let amountCell = document.createElement("td");
                        amountCell.innerHTML = `<input type="text" class="form-control amount" name="Screens[${monthIndex}][${screenIndex}].AmtPerScreen" readonly />`;
                        row.appendChild(amountCell);

                        tableBody.appendChild(row);
                    }
                });
            }
        </script>*@

            @*<script>
            document.getElementById("generateBtn").addEventListener("click", function () {
                generateTable();
            });

            function generateTable() {
                let fromDate = document.getElementById("fromDate").value;
                let toDate = document.getElementById("toDate").value;

                if (!fromDate || !toDate) {
                    alert("Please select both From Date and To Date.");
                    return;
                }

                let from = new Date(fromDate + "-01");
                let to = new Date(toDate + "-01");

                if (from > to) {
                    alert("From Date cannot be greater than To Date.");
                    return;
                }

                let tableBody = document.getElementById("tableBody");
                tableBody.innerHTML = ""; // Clear previous data

                let current = new Date(from);
                let months = [];

                while (current <= to) {
                    let monthYear = current.toLocaleString('default', { month: 'short' }) + " " + current.getFullYear();
                    months.push(monthYear);
                    current.setMonth(current.getMonth() + 1);
                }

                let screens = [
                    { SEQUENTIAL_SCREEN_NO: 1, ScreenPrice: 500, ScreenType: "2D" },
                    { SEQUENTIAL_SCREEN_NO: 2, ScreenPrice: 700, ScreenType: "3D" }
                ];

                months.forEach((month, monthIndex) => {
                    screens.forEach((screen, screenIndex) => {
                        let row = document.createElement("tr");

                        if (screenIndex === 0) {
                            let monthCell = document.createElement("td");
                            monthCell.setAttribute("rowspan", screens.length);
                            monthCell.className = "fw-bold align-middle";
                            monthCell.innerText = month;
                            row.appendChild(monthCell);
                        }

                        let screenNoCell = document.createElement("td");
                        screenNoCell.innerText = screen.SEQUENTIAL_SCREEN_NO;
                        row.appendChild(screenNoCell);

                        let rateCell = document.createElement("td");
                        rateCell.innerHTML = `<input type="text" class="form-control screenPrice" name="Screens[${monthIndex}][${screenIndex}].ScreenPrice" value="${screen.ScreenPrice}" readonly />`;
                        row.appendChild(rateCell);

                        let screenTypeCell = document.createElement("td");
                        screenTypeCell.innerText = screen.ScreenType;
                        row.appendChild(screenTypeCell);

                        let totalShowCell = document.createElement("td");
                        totalShowCell.innerHTML = `<input type="number" class="form-control totalShow" name="Screens[${monthIndex}][${screenIndex}].TotalShow" data-index="${monthIndex}-${screenIndex}" oninput="calculateActualShow(this)" required />`;
                        row.appendChild(totalShowCell);

                        let cancelShowCell = document.createElement("td");
                        cancelShowCell.innerHTML = `<input type="number" class="form-control cancelShow" name="Screens[${monthIndex}][${screenIndex}].CancelShow" data-index="${monthIndex}-${screenIndex}" oninput="calculateActualShow(this)" required />`;
                        row.appendChild(cancelShowCell);

                        let actualShowCell = document.createElement("td");
                        actualShowCell.innerHTML = `<input type="number" class="form-control actualShow" name="Screens[${monthIndex}][${screenIndex}].ActualShow" readonly />`;
                        row.appendChild(actualShowCell);

                        let amountCell = document.createElement("td");
                        amountCell.innerHTML = `<input type="text" class="form-control amount" name="Screens[${monthIndex}][${screenIndex}].AmtPerScreen" readonly />`;
                        row.appendChild(amountCell);

                        tableBody.appendChild(row);
                    });
                });
            }

            function calculateActualShow(input) {
                let index = input.getAttribute("data-index");
                let row = input.closest("tr");

                let totalShow = parseInt(row.querySelector(".totalShow").value) || 0;
                let cancelShow = parseInt(row.querySelector(".cancelShow").value) || 0;
                let actualShowInput = row.querySelector(".actualShow");
                let amountInput = row.querySelector(".amount");

                let rate = parseFloat(row.querySelector(".screenPrice").value) || 0;

                let actualShow = Math.max(totalShow - cancelShow, 0);
                actualShowInput.value = actualShow;

                let amount = actualShow * rate;
                amountInput.value = amount.toFixed(2);

                calculateTotalAmount();
            }

            function calculateTotalAmount() {
                let totalAmount = 0;
                document.querySelectorAll(".amount").forEach(input => {
                    totalAmount += parseFloat(input.value) || 0;
                });
                document.getElementById("totalAmount").innerText = `₹${totalAmount.toFixed(2)}`;
            }
        </script>*@


</body>
</html>
