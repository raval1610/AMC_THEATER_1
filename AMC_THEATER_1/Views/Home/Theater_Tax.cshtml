@model AMC_THEATER_1.Models.TaxPaymentViewModel
@{
    Layout = "~/Views/Shared/_HomeSideBar.cshtml";

    ViewBag.Title = "Theater Tax Payment";
    ViewBag.ShowBasicNavbar = false;
    ViewBag.ShowNavbar = true;
    ViewBag.ShowSideBar = true;
    ViewBag.Login = false;
    ViewBag.ModuleTax = true;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Theater Tax Payment</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .form-control, .form-select {
            border-radius: 0.25rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .form-label {
            margin-bottom: 0.5rem;
        }

        .container {
            max-width: 90%;
            padding: 0 15px;
            margin-left: 185px;
            transition: margin-left 0.3s;
            padding: 15px;
        }

        .card {
            padding: 20px;
        }

        .btn-payment {
            background-color: #28a745;
            color: white;
        }
    </style>
</head>
<body>
    <div class="col-xs-12 mt-3 ms-3">
        <div class="col-md-12 mt-3 ms-4">
            <div class="container ms-5">
                <div class="card shadow-sm ms-2">
                    <div class="card-header bg-light text-dark fw-bold text-center">
                        <h4 class="mb-0 fs-2">Make Payment</h4>
                    </div>

                    <!-- Form to fetch theater details -->
                    <form action="@Url.Action("Theater_Tax", "Home")" method="post">
                        <div class="mb-4 ms-5">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex mt-4 align-items-center">
                                    <input type="text" id="theater_id" name="theater_id"
                                           class="form-control me-2 w-100 text-center"
                                           placeholder="Enter Theater ID"
                                           value="@Request.Form["theater_id"]" required> <!-- ✅ Retains input value -->

                                    <button type="submit" class="btn btn-secondary">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                                <div class="text-end">
                                    <a href="javascript:void(0);" id="forgotIdLink" class="btn pe-3 ps-3 mt-3 w-2me-5 btn-secondary" onclick="handleForgotIdClick()">Search ID</a>
                                </div>
                            </div>
                        </div>
                    </form>





                    <div class="mb-4">
                        <h4 class="fw-bold text-center bg-light mt-3 p-3">Basic Information</h4>
                    </div>

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Error"]</div>
                    }

                    @if (Model != null)
                    {
                        <div class="owner-details ms-5" style="display: block;">
                            <div class="row g-3 align-items-center">
                                <div class="col-md-4">
                                    <label for="owner_name" class="form-label fw-bold">Owner Name</label>
                                    <input type="text" id="owner_name" name="owner_name" class="form-control w-100" value="@Model.OwnerName" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="mobile_no" class="form-label fw-bold">Mobile No</label>
                                    <input type="text" id="mobile_no" name="mobile_no" class="form-control w-100" value="@Model.MobileNo" readonly required>
                                </div>
                                <div class="col-md-4">
                                    <label for="address" class="form-label fw-bold">Address</label>
                                    <textarea id="address" name="address" class="form-control w-100" rows="1" readonly required>@Model.Address</textarea>
                                </div>

                                <div class="row mt-5">
                                    <div class="col-md-4 me-0">
                                        <label for="email" class="form-label fw-bold">Email</label>
                                        <input type="email" id="email" name="email" class="form-control" value="@Model.Email" readonly required>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-4">
                                            <label for="fromDate" class="form-label fw-bold">From Date</label>
                                            <input type="month" id="fromDate" name="fromDate" class="form-control ms-1" required>
                                        </div>

                                        <div class="col-md-4">
                                            <label for="toDate" class="form-label fw-bold ms-3">To Date</label>
                                            <input type="month" id="toDate" name="toDate" class="form-control ms-2" required>
                                        </div>

                                        <div class="col-md-4 d-flex align-items-end">
                                            <button type="button" class="btn btn-primary" onclick="generateGrid()">Generate Grid</button>
                                        </div>
                                    </div>


                                    <table id="screenCapacityTable" class="table table-bordered text-center mt-3">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Month</th>
                                                <th>Screen No</th>
                                                <th>Rate</th>
                                                <th>Screen Type</th>
                                                <th>Total Shows</th>
                                                <th>Canceled Shows</th>
                                                <th>Actual Shows</th>
                                                <th>Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody id="screenGridBody">
                                            @for (int i = 0; i < Model.Screens.Count; i++)
                                            {
                                                <tr>
                                                    <td>@Model.Screens[i].SEQUENTIAL_SCREEN_NO</td>

                                                    <!-- Hidden Field to Ensure ScreenId is Passed -->
                                                    <input type="hidden" name="Screens[@i].ScreenId" value="@Model.Screens[i].ScreenId" />

                                                    <td>
                                                        <input type="text" class="form-control screenPrice"
                                                               name="Screens[@i].ScreenPrice"
                                                               value="@Model.Screens[i].ScreenPrice" readonly />
                                                    </td>
                                                    <td>@Model.Screens[i].ScreenType</td>


                                                    <td>
                                                        <input type="number" class="form-control totalShow"
                                                               name="Screens[@i].TotalShow"
                                                               data-index="@i"
                                                               oninput="calculateActualShow(@i)" required />
                                                    </td>
                                                    <td>
                                                        <input type="number" class="form-control cancelShow"
                                                               name="Screens[@i].CancelShow"
                                                               data-index="@i"
                                                               oninput="calculateActualShow(@i)" required />
                                                    </td>
                                                    <td>
                                                        <input type="number" class="form-control actualShow"
                                                               name="Screens[@i].ActualShow"
                                                               id="actualShow_@i"
                                                               value="0" readonly />
                                                    </td>
                                                    <td>
                                                        <input type="text" class="form-control amount"
                                                               name="Screens[@i].AmtPerScreen"
                                                               id="amtPerScreen_@i"
                                                               value="0" readonly />
                                                    </td>
                                                </tr>

                                            }

                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="6" class="text-danger">Calculate by Actual Shows × Rate = Amount</td>
                                                <td class="text-end fw-bold">Total Amount:</td>
                                                <td id="totalAmount" class="fw-bold text-end">₹0</td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                    <div class="mb-3">
                                        <label for="file" class="form-label fw-bold">Upload Show Statement</label>
                                        <input type="file" id="file" name="DocumentPath" class="form-control" accept=".jpg,.jpeg,.png,.pdf" required>
                                    </div>

                                    <div class="col-12 text-center">
                                        <button type="submit" class="btn btn-success m-3 w-25">Submit Payment</button>
                                    </div>



                                </div>
                            </div>


                        </div>

                    }

                    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
                    <script>function generateGrid() {
                            var fromDate = document.getElementById('fromDate').value;
                            var toDate = document.getElementById('toDate').value;

                            if (!fromDate || !toDate) {
                                alert("Please select both From Date and To Date.");
                                return;
                            }

                            // Convert the month string (yyyy-mm) to Date objects
                            var from = new Date(fromDate + "-01");  // Add day to make it a valid date
                            var to = new Date(toDate + "-01");

                            if (from > to) {
                                alert("From Date should be before To Date.");
                                return;
                            }

                            var months = getMonthsInRange(from, to);

                            // Clear any existing rows in the grid
                            document.getElementById('screenGridBody').innerHTML = '';

                            // Assuming you have screen data in an array named `screenData`
                            var screenData = [
                                { ScreenId: 1, ScreenPrice: 100, ScreenType: 'IMAX', SEQUENTIAL_SCREEN_NO: 1 },
                                { ScreenId: 2, ScreenPrice: 150, ScreenType: '3D', SEQUENTIAL_SCREEN_NO: 2 },
                                { ScreenId: 3, ScreenPrice: 120, ScreenType: 'Standard', SEQUENTIAL_SCREEN_NO: 3 }
                            ];

                            // Loop through months
                            months.forEach(function (month, monthIndex) {
                                var monthName = month.split(" ")[0]; // Extract month name (e.g., January)
                                var year = month.split(" ")[1]; // Extract year (e.g., 2025)

                                // Add rows for screens for this month
                                screenData.forEach(function (screen, rowIndex) {
                                    // For the first screen in each month, display the month and year (with rowspan)
                                    let row = `<tr>
                ${rowIndex === 0 ? `<td rowspan="${screenData.length}">${monthName} ${year}</td>` : ''}
                <td>${screen.SEQUENTIAL_SCREEN_NO}</td>
                <td>${screen.ScreenPrice}</td>
                <td>${screen.ScreenType}</td>
                <td><input type="number" class="form-control totalShow" name="Screens[${rowIndex}].TotalShow" data-index="${rowIndex}" oninput="calculateActualShow(${rowIndex})" required /></td>
                <td><input type="number" class="form-control cancelShow" name="Screens[${rowIndex}].CancelShow" data-index="${rowIndex}" oninput="calculateActualShow(${rowIndex})" required /></td>
                <td><input type="number" class="form-control actualShow" id="actualShow_${rowIndex}" name="Screens[${rowIndex}].ActualShow" value="0" readonly /></td>
                <td><input type="text" class="form-control amount" id="amtPerScreen_${rowIndex}" name="Screens[${rowIndex}].AmtPerScreen" value="0" readonly /></td>
            </tr>`;

                                    // Add the screen row to the table
                                    document.getElementById('screenGridBody').insertAdjacentHTML('beforeend', row);
                                });
                            });
                        }

                        // Function to get months in range
                        function getMonthsInRange(startDate, endDate) {
                            var months = [];
                            var currentDate = new Date(startDate);

                            while (currentDate <= endDate) {
                                months.push(currentDate.toLocaleString('default', { month: 'long', year: 'numeric' }));
                                currentDate.setMonth(currentDate.getMonth() + 1);
                            }

                            return months;
                        }

                        // Function to calculate actual show (you can customize the logic as needed)
                        function calculateActualShow(screenId) {
                            var totalShow = parseInt(document.querySelector(`input[data-index='${screenId}']`).value) || 0;
                            var canceledShow = parseInt(document.querySelector(`input[data-index='${screenId}']`).value) || 0;

                            var actualShow = totalShow - canceledShow;
                            var amount = actualShow * 100;  // Assuming a fixed price for simplicity. Adjust as needed.

                            // Update the actual show and amount
                            document.querySelector(`input[data-index='${screenId}'].actualShow`).value = actualShow;
                            document.querySelector(`input[data-index='${screenId}'].amount`).value = amount;

                            updateTotalAmount();
                        }

                        // Function to update total amount
                        function updateTotalAmount() {
                            var totalAmount = 0;
                            document.querySelectorAll('.amount').forEach(function (input) {
                                totalAmount += parseFloat(input.value) || 0;
                            });

                            document.getElementById('totalAmount').textContent = '₹' + totalAmount;
                        }

</script>
                    @*<script>
                        function generateGrid() {
                            let fromDate = document.getElementById("fromDate").value;
                            let toDate = document.getElementById("toDate").value;

                            if (!fromDate || !toDate) {
                                alert("Please select both From Date and To Date.");
                                return;
                            }

                            // Parse the dates
                            let startYear = parseInt(fromDate.split("-")[0]);
                            let startMonth = parseInt(fromDate.split("-")[1]);
                            let endYear = parseInt(toDate.split("-")[0]);
                            let endMonth = parseInt(toDate.split("-")[1]);

                            // Example screen data (you should replace this with actual data)
                            let screenData = [
                                { SEQUENTIAL_SCREEN_NO: 1, ScreenType: "Theater" },
                                { SEQUENTIAL_SCREEN_NO: 2, ScreenType: "Video" },
                                // You can add more screen data here
                            ];

                            let tbody = document.getElementById("screenGridBody");
                            tbody.innerHTML = ""; // Clear previous data

                            let rowIndex = 0; // Track row index for unique data indexing

                            // Loop through the months from From Date to To Date
                            for (let year = startYear; year <= endYear; year++) {
                                for (let month = (year === startYear ? startMonth : 1); month <= (year === endYear ? endMonth : 12); month++) {
                                    let monthName = new Date(year, month - 1).toLocaleString('default', { month: 'long' });

                                    // Collect all screen numbers for the current month
                                    let screenNumbers = screenData.map(screen => screen.SEQUENTIAL_SCREEN_NO).join(", ");

                                    // Loop through screens to create rows for each screen in the current month
                                    screenData.forEach((screen) => {
                                        let rate = screen.ScreenType.toLowerCase() === "theater" ? 75 : 25;

                                        // Create the table row for each screen in the current month
                                        let row = `<tr>
                                            <td>${monthName}<br> ${year}</td>
                                            <td>${screen.SEQUENTIAL_SCREEN_NO}</td>
                                            <td>${rate}</td>
                                            <td>${screen.ScreenType}</td>
                                            <td><input type="number" class="form-control totalShow" name="Screens[${rowIndex}].TotalShow" data-index="${rowIndex}" oninput="calculateActualShow(${rowIndex})" required /></td>
                                            <td><input type="number" class="form-control cancelShow" name="Screens[${rowIndex}].CancelShow" data-index="${rowIndex}" oninput="calculateActualShow(${rowIndex})" required /></td>
                                            <td><input type="number" class="form-control actualShow" id="actualShow_${rowIndex}" name="Screens[${rowIndex}].ActualShow" value="0" readonly /></td>
                                            <td><input type="text" class="form-control amount" id="amtPerScreen_${rowIndex}" name="Screens[${rowIndex}].AmtPerScreen" value="0" readonly /></td>
                                        </tr>`;

                                        tbody.innerHTML += row;
                                        rowIndex++; // Increment row index for next screen
                                    });
                                }
                            }

                            // Recalculate total amount
                            calculateTotalAmount();
                        }

                        function calculateActualShow(index) {
                            let totalShow = parseInt(document.querySelector(`[name='Screens[${index}].TotalShow']`)?.value) || 0;
                            let cancelShow = parseInt(document.querySelector(`[name='Screens[${index}].CancelShow']`)?.value) || 0;
                            let actualShowInput = document.getElementById(`actualShow_${index}`);
                            let amountInput = document.getElementById(`amtPerScreen_${index}`);

                            // Locate the correct row
                            let row = document.querySelector(`[name='Screens[${index}].TotalShow']`)?.closest("tr");

                            // Fetch the ScreenType
                            let screenType = row ? row.cells[3].textContent.trim() : "";
                            let rate = screenType.toLowerCase() === "theater" ? 75 : 25;

                            // Calculate Actual Shows
                            let actualShow = Math.max(totalShow - cancelShow, 0);
                            actualShowInput.value = actualShow;

                            // Calculate Amount per Screen
                            let amount = actualShow * rate;
                            amountInput.value = amount.toFixed(2);

                            // Recalculate total amount
                            calculateTotalAmount();
                        }

                        function calculateTotalAmount() {
                            let totalAmount = 0;
                            document.querySelectorAll(".amount").forEach(input => {
                                totalAmount += parseFloat(input.value) || 0;
                            });
                            document.getElementById("totalAmount").innerText = `₹${totalAmount.toFixed(2)}`;
                        }
                    </script>*@

</body>
</html>
